// Generated by Haxe 4.0.0-rc.1+1fdd3d5
(function ($hx_exports) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
var Macros = function() { };
Macros.__name__ = true;
Math.__name__ = true;
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i1 = 0;
	while(i1 < s.length) {
		var c1 = s.charCodeAt(i1++);
		if(55296 <= c1 && c1 <= 56319) {
			c1 = c1 - 55232 << 10 | s.charCodeAt(i1++) & 1023;
		}
		if(c1 <= 127) {
			a.push(c1);
		} else if(c1 <= 2047) {
			a.push(192 | c1 >> 6);
			a.push(128 | c1 & 63);
		} else if(c1 <= 65535) {
			a.push(224 | c1 >> 12);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		} else {
			a.push(240 | c1 >> 18);
			a.push(128 | c1 >> 12 & 63);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c1 = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c1);
			}
			break;
		}
		return s;
	}
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : true, __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
haxe_crypto_BaseCode.__name__ = true;
haxe_crypto_BaseCode.prototype = {
	initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.b[i1]] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255;
		}
		return out;
	}
};
var mp4lib_Box = function(boxType,size,uuid,largesize) {
	this.size = size;
	this.boxtype = boxType;
	if(this.size == 1 && largesize != null) {
		this.largesize = largesize;
	}
	if(uuid != null) {
		this.extended_type = uuid;
	}
	this.localPos = 0;
	this.localEnd = 0;
};
mp4lib_Box.__name__ = true;
mp4lib_Box.prototype = {
	write: function(data,pos) {
		this.localPos = pos;
		this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.size,{ fileName : "./src/mp4lib/Box.hx", lineNumber : 36, className : "mp4lib.Box", methodName : "write"});
		if(this.extended_type == null) {
			this._writeData(data,mp4lib_Fields.FIELD_ID,this.boxtype,{ fileName : "./src/mp4lib/Box.hx", lineNumber : 39, className : "mp4lib.Box", methodName : "write"});
		} else {
			this._writeData(data,mp4lib_Fields.FIELD_ID,"uuid",{ fileName : "./src/mp4lib/Box.hx", lineNumber : 41, className : "mp4lib.Box", methodName : "write"});
		}
		if(this.size == 1) {
			this._writeData(data,mp4lib_Fields.FIELD_INT64,this.largesize,{ fileName : "./src/mp4lib/Box.hx", lineNumber : 45, className : "mp4lib.Box", methodName : "write"});
		}
		if(this.extended_type != null) {
			this._writeData(data,mp4lib_Fields.FIELD_INT8,this.extended_type[0],{ fileName : "./src/mp4lib/Box.hx", lineNumber : 50, className : "mp4lib.Box", methodName : "write"});
			this._writeData(data,mp4lib_Fields.FIELD_INT8,this.extended_type[1],{ fileName : "./src/mp4lib/Box.hx", lineNumber : 50, className : "mp4lib.Box", methodName : "write"});
			this._writeData(data,mp4lib_Fields.FIELD_INT8,this.extended_type[2],{ fileName : "./src/mp4lib/Box.hx", lineNumber : 50, className : "mp4lib.Box", methodName : "write"});
			this._writeData(data,mp4lib_Fields.FIELD_INT8,this.extended_type[3],{ fileName : "./src/mp4lib/Box.hx", lineNumber : 50, className : "mp4lib.Box", methodName : "write"});
			this._writeData(data,mp4lib_Fields.FIELD_INT8,this.extended_type[4],{ fileName : "./src/mp4lib/Box.hx", lineNumber : 50, className : "mp4lib.Box", methodName : "write"});
			this._writeData(data,mp4lib_Fields.FIELD_INT8,this.extended_type[5],{ fileName : "./src/mp4lib/Box.hx", lineNumber : 50, className : "mp4lib.Box", methodName : "write"});
			this._writeData(data,mp4lib_Fields.FIELD_INT8,this.extended_type[6],{ fileName : "./src/mp4lib/Box.hx", lineNumber : 50, className : "mp4lib.Box", methodName : "write"});
			this._writeData(data,mp4lib_Fields.FIELD_INT8,this.extended_type[7],{ fileName : "./src/mp4lib/Box.hx", lineNumber : 50, className : "mp4lib.Box", methodName : "write"});
			this._writeData(data,mp4lib_Fields.FIELD_INT8,this.extended_type[8],{ fileName : "./src/mp4lib/Box.hx", lineNumber : 50, className : "mp4lib.Box", methodName : "write"});
			this._writeData(data,mp4lib_Fields.FIELD_INT8,this.extended_type[9],{ fileName : "./src/mp4lib/Box.hx", lineNumber : 50, className : "mp4lib.Box", methodName : "write"});
			this._writeData(data,mp4lib_Fields.FIELD_INT8,this.extended_type[10],{ fileName : "./src/mp4lib/Box.hx", lineNumber : 50, className : "mp4lib.Box", methodName : "write"});
			this._writeData(data,mp4lib_Fields.FIELD_INT8,this.extended_type[11],{ fileName : "./src/mp4lib/Box.hx", lineNumber : 50, className : "mp4lib.Box", methodName : "write"});
			this._writeData(data,mp4lib_Fields.FIELD_INT8,this.extended_type[12],{ fileName : "./src/mp4lib/Box.hx", lineNumber : 50, className : "mp4lib.Box", methodName : "write"});
			this._writeData(data,mp4lib_Fields.FIELD_INT8,this.extended_type[13],{ fileName : "./src/mp4lib/Box.hx", lineNumber : 50, className : "mp4lib.Box", methodName : "write"});
			this._writeData(data,mp4lib_Fields.FIELD_INT8,this.extended_type[14],{ fileName : "./src/mp4lib/Box.hx", lineNumber : 50, className : "mp4lib.Box", methodName : "write"});
			this._writeData(data,mp4lib_Fields.FIELD_INT8,this.extended_type[15],{ fileName : "./src/mp4lib/Box.hx", lineNumber : 50, className : "mp4lib.Box", methodName : "write"});
		}
		return this.localPos;
	}
	,read: function(data,pos,end) {
		throw new js__$Boot_HaxeError("not implemented!");
	}
	,computeLength: function() {
		this.size = mp4lib_Fields.FIELD_UINT32.getLength() + mp4lib_Fields.FIELD_ID.getLength();
		if(this.extended_type != null) {
			this.size += mp4lib_Fields.FIELD_INT8.getLength() * 16;
		}
	}
	,getBoxByType: function(boxType) {
		var boxarr = Reflect.field(this,"boxes");
		if(boxarr != null) {
			var _g = 0;
			while(_g < boxarr.length) {
				var box = boxarr[_g];
				++_g;
				if(box.boxtype == boxType) {
					return box;
				}
			}
		}
		return null;
	}
	,getAllBoxes: function() {
		return this.getBoxesByType();
	}
	,getBoxesByType: function(boxType) {
		var retval = [];
		var boxarr = Reflect.field(this,"boxes");
		if(boxarr != null) {
			var _g = 0;
			while(_g < boxarr.length) {
				var box = boxarr[_g];
				++_g;
				if(boxType == null || box.boxtype == boxType) {
					retval.push(box);
				}
			}
		}
		return retval;
	}
	,getBoxIndexByType: function(boxType) {
		var index = 0;
		var boxarr = Reflect.field(this,"boxes");
		if(boxarr != null) {
			var _g = 0;
			while(_g < boxarr.length) {
				var box = boxarr[_g];
				++_g;
				if(box.boxtype == boxType) {
					return index;
				}
				++index;
			}
		}
		return null;
	}
	,removeBoxByType: function(boxType) {
		var boxarr = Reflect.field(this,"boxes");
		if(boxarr != null) {
			var _g = boxarr.length;
			var _g1 = 0;
			while(_g < _g1) {
				var i = _g++;
				if(boxarr[i].boxtype == boxType) {
					boxarr.splice(i,1);
				}
			}
		} else {
			throw new js__$Boot_HaxeError("" + this.boxtype + "does not have " + boxType + " box, impossible to remove it");
		}
	}
	,_readData: function(data,dataType) {
		var retval = dataType.read(data,this.localPos,this.localEnd);
		this.localPos += dataType.getLength(retval);
		return retval;
	}
	,_readArrayData: function(data,dataArrayType) {
		var array = [];
		var dataArrayTypeLength = dataArrayType.getLength();
		var size = Math.floor((this.localEnd - this.localPos) / dataArrayTypeLength);
		var _g = 0;
		var _g1 = size;
		while(_g < _g1) {
			var i = _g++;
			array.push(dataArrayType.read(data,this.localPos));
			this.localPos += dataArrayTypeLength;
		}
		return array;
	}
	,_writeArrayData: function(data,dataArrayType,array) {
		if(array == null || array.length == 0) {
			throw new js__$Boot_HaxeError("an array to write is null, undefined or length = 0 for box : " + this.boxtype);
		}
		var _g = 0;
		var _g1 = array.length;
		while(_g < _g1) {
			var i = _g++;
			this._writeData(data,dataArrayType,array[i],{ fileName : "./src/mp4lib/Box.hx", lineNumber : 149, className : "mp4lib.Box", methodName : "_writeArrayData"});
		}
	}
	,_readArrayFieldData: function(data,dataArrayType,arraySize) {
		var innerFieldLength = -1;
		var array = [];
		var _g = 0;
		var _g1 = arraySize;
		while(_g < _g1) {
			var i = _g++;
			array.push(dataArrayType.read(data,this.localPos));
			if(innerFieldLength == -1) {
				innerFieldLength = dataArrayType.getLength(array[i]);
			}
			this.localPos += innerFieldLength;
		}
		return array;
	}
	,_writeData: function(data,dataType,dataField,p) {
		if(dataField == null) {
			throw new js__$Boot_HaxeError("" + p.fileName + ":" + p.lineNumber + ":\n\ta field to write is null or undefined for box : " + this.boxtype);
		} else {
			dataType.write(data,this.localPos,dataField);
			this.localPos += dataType.getLength(dataField);
		}
		return this.localPos;
	}
	,_writeBuffer: function(data,dataField,size) {
		data.set(dataField,this.localPos);
		this.localPos += size;
	}
};
var mp4lib_ContainerBox = function(boxType,size,uuid,largesize) {
	this.boxes = null;
	mp4lib_Box.call(this,boxType,size,uuid);
	this.boxes = [];
};
mp4lib_ContainerBox.__name__ = true;
mp4lib_ContainerBox.__super__ = mp4lib_Box;
mp4lib_ContainerBox.prototype = $extend(mp4lib_Box.prototype,{
	write: function(data,pos) {
		mp4lib_Box.prototype.write.call(this,data,pos);
		var _g = 0;
		var _g1 = this.boxes.length;
		while(_g < _g1) {
			var i = _g++;
			this.localPos = this.boxes[i].write(data,this.localPos);
		}
		return this.localPos;
	}
	,read: function(data,pos,end) {
		var size = 0;
		var uuidFieldPos = 0;
		var uuid = null;
		var boxtype;
		var box;
		while(pos < end) {
			size = mp4lib_Fields.FIELD_UINT32.read(data,pos);
			boxtype = mp4lib_Fields.readString(data,pos + 4,4);
			if(boxtype == "uuid") {
				uuidFieldPos = size == 1 ? 16 : 8;
				uuid = new mp4lib_fields_ArrayField(mp4lib_Fields.FIELD_INT8,16).read(data,pos + uuidFieldPos,pos + uuidFieldPos + 16);
				uuid = JSON.stringify(uuid);
			}
			box = Mp4lib.createBox(boxtype,size,uuid);
			if(boxtype == "uuid") {
				pos = box.read(data,pos + mp4lib_Fields.FIELD_INT8.getLength() * 16 + 8,pos + size);
				uuid = null;
			} else {
				pos = box.read(data,pos + 8,pos + size);
			}
			if(box.boxtype != null) {
				this.boxes.push(box);
			}
			if(box.size <= 0 || box.size == null) {
				throw new js__$Boot_HaxeError("Problem on size of box " + box.boxtype + ", parsing stopped to avoid infinite loop");
			}
		}
		return pos;
	}
	,computeLength: function() {
		mp4lib_Box.prototype.computeLength.call(this);
		var i = 0;
		var _g = 0;
		var _g1 = this.boxes.length;
		while(_g < _g1) {
			var i1 = _g++;
			this.boxes[i1].computeLength();
			this.size += this.boxes[i1].size;
		}
	}
});
var mp4lib_MovieBox = function(size) {
	mp4lib_ContainerBox.call(this,"moov",size);
};
mp4lib_MovieBox.__name__ = true;
mp4lib_MovieBox.__super__ = mp4lib_ContainerBox;
mp4lib_MovieBox.prototype = $extend(mp4lib_ContainerBox.prototype,{
});
var mp4lib_MovieFragmentBox = function(size) {
	mp4lib_ContainerBox.call(this,"moof",size);
};
mp4lib_MovieFragmentBox.__name__ = true;
mp4lib_MovieFragmentBox.__super__ = mp4lib_ContainerBox;
mp4lib_MovieFragmentBox.prototype = $extend(mp4lib_ContainerBox.prototype,{
});
var mp4lib_FileTypeBox = function(size) {
	this.compatible_brands = [1769172845,1769172790,1836278888];
	this.minor_brand = 1;
	this.major_brand = 1769172790;
	mp4lib_Box.call(this,"ftyp",size);
};
mp4lib_FileTypeBox.__name__ = true;
mp4lib_FileTypeBox.__super__ = mp4lib_Box;
mp4lib_FileTypeBox.prototype = $extend(mp4lib_Box.prototype,{
	computeLength: function() {
		mp4lib_Box.prototype.computeLength.call(this);
		this.size += mp4lib_Fields.FIELD_INT32.getLength() * 2 + mp4lib_Fields.FIELD_INT32.getLength() * this.compatible_brands.length;
	}
	,read: function(data,pos,end) {
		this.localPos = pos;
		this.localEnd = end;
		this.major_brand = this._readData(data,mp4lib_Fields.FIELD_INT32);
		this.minor_brand = this._readData(data,mp4lib_Fields.FIELD_INT32);
		this.compatible_brands = this._readArrayData(data,mp4lib_Fields.FIELD_INT32);
		return this.localPos;
	}
	,write: function(data,pos) {
		mp4lib_Box.prototype.write.call(this,data,pos);
		this._writeData(data,mp4lib_Fields.FIELD_INT32,this.major_brand,{ fileName : "./src/mp4lib/FileTypeBox.hx", lineNumber : 36, className : "mp4lib.FileTypeBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_INT32,this.minor_brand,{ fileName : "./src/mp4lib/FileTypeBox.hx", lineNumber : 37, className : "mp4lib.FileTypeBox", methodName : "write"});
		this._writeArrayData(data,mp4lib_Fields.FIELD_INT32,this.compatible_brands);
		return this.localPos;
	}
});
var mp4lib_FullBox = function(boxType,size,uuid,largesize) {
	this.flags = 0;
	this.version = 1;
	mp4lib_Box.call(this,boxType,size,uuid);
};
mp4lib_FullBox.__name__ = true;
mp4lib_FullBox.__super__ = mp4lib_Box;
mp4lib_FullBox.prototype = $extend(mp4lib_Box.prototype,{
	read: function(data,pos,end) {
		this.localPos = pos;
		this.localEnd = end;
		this.version = this._readData(data,mp4lib_Fields.FIELD_INT8);
		this.flags = this._readData(data,mp4lib_Fields.FIELD_BIT24);
		return this.localEnd;
	}
	,write: function(data,pos) {
		mp4lib_Box.prototype.write.call(this,data,pos);
		this._writeData(data,mp4lib_Fields.FIELD_INT8,this.version,{ fileName : "./src/mp4lib/FullBox.hx", lineNumber : 24, className : "mp4lib.FullBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_BIT24,this.flags,{ fileName : "./src/mp4lib/FullBox.hx", lineNumber : 25, className : "mp4lib.FullBox", methodName : "write"});
		return this.localPos;
	}
	,getFullBoxAttributesLength: function() {
		this.size += mp4lib_Fields.FIELD_INT8.getLength() + mp4lib_Fields.FIELD_BIT24.getLength();
	}
	,computeLength: function() {
		mp4lib_Box.prototype.computeLength.call(this);
		this.getFullBoxAttributesLength();
	}
});
var mp4lib_MovieFragmentHeaderBox = function(size) {
	mp4lib_FullBox.call(this,"mfhd",size);
};
mp4lib_MovieFragmentHeaderBox.__name__ = true;
mp4lib_MovieFragmentHeaderBox.__super__ = mp4lib_FullBox;
mp4lib_MovieFragmentHeaderBox.prototype = $extend(mp4lib_FullBox.prototype,{
	computeLength: function() {
		mp4lib_FullBox.prototype.computeLength.call(this);
		this.size += mp4lib_Fields.FIELD_UINT32.getLength();
	}
	,read: function(data,pos,end) {
		mp4lib_FullBox.prototype.read.call(this,data,pos,end);
		this.sequence_number = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		return this.localPos;
	}
	,write: function(data,pos) {
		mp4lib_FullBox.prototype.write.call(this,data,pos);
		this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.sequence_number,{ fileName : "./src/mp4lib/MovieFragmentHeaderBox.hx", lineNumber : 20, className : "mp4lib.MovieFragmentHeaderBox", methodName : "write"});
		return this.localPos;
	}
});
var mp4lib_MovieFragmentRandomAccessBox = function(size) {
	mp4lib_ContainerBox.call(this,"mfra",size);
};
mp4lib_MovieFragmentRandomAccessBox.__name__ = true;
mp4lib_MovieFragmentRandomAccessBox.__super__ = mp4lib_ContainerBox;
mp4lib_MovieFragmentRandomAccessBox.prototype = $extend(mp4lib_ContainerBox.prototype,{
});
var mp4lib_UserDataBox = function(size) {
	mp4lib_ContainerBox.call(this,"udta",size);
};
mp4lib_UserDataBox.__name__ = true;
mp4lib_UserDataBox.__super__ = mp4lib_ContainerBox;
mp4lib_UserDataBox.prototype = $extend(mp4lib_ContainerBox.prototype,{
});
var mp4lib_TrackBox = function(size) {
	mp4lib_ContainerBox.call(this,"trak",size);
};
mp4lib_TrackBox.__name__ = true;
mp4lib_TrackBox.__super__ = mp4lib_ContainerBox;
mp4lib_TrackBox.prototype = $extend(mp4lib_ContainerBox.prototype,{
});
var mp4lib_EditBox = function(size) {
	mp4lib_ContainerBox.call(this,"edts",size);
};
mp4lib_EditBox.__name__ = true;
mp4lib_EditBox.__super__ = mp4lib_ContainerBox;
mp4lib_EditBox.prototype = $extend(mp4lib_ContainerBox.prototype,{
});
var mp4lib_MediaBox = function(size) {
	mp4lib_ContainerBox.call(this,"mdia",size);
};
mp4lib_MediaBox.__name__ = true;
mp4lib_MediaBox.__super__ = mp4lib_ContainerBox;
mp4lib_MediaBox.prototype = $extend(mp4lib_ContainerBox.prototype,{
});
var mp4lib_MediaInformationBox = function(size) {
	mp4lib_ContainerBox.call(this,"minf",size);
};
mp4lib_MediaInformationBox.__name__ = true;
mp4lib_MediaInformationBox.__super__ = mp4lib_ContainerBox;
mp4lib_MediaInformationBox.prototype = $extend(mp4lib_ContainerBox.prototype,{
});
var mp4lib_DataInformationBox = function(size) {
	mp4lib_ContainerBox.call(this,"dinf",size);
};
mp4lib_DataInformationBox.__name__ = true;
mp4lib_DataInformationBox.__super__ = mp4lib_ContainerBox;
mp4lib_DataInformationBox.prototype = $extend(mp4lib_ContainerBox.prototype,{
});
var mp4lib_SampleTableBox = function(size) {
	mp4lib_ContainerBox.call(this,"stbl",size);
};
mp4lib_SampleTableBox.__name__ = true;
mp4lib_SampleTableBox.__super__ = mp4lib_ContainerBox;
mp4lib_SampleTableBox.prototype = $extend(mp4lib_ContainerBox.prototype,{
});
var mp4lib_MovieExtendsBox = function(size) {
	mp4lib_ContainerBox.call(this,"mvex",size);
};
mp4lib_MovieExtendsBox.__name__ = true;
mp4lib_MovieExtendsBox.__super__ = mp4lib_ContainerBox;
mp4lib_MovieExtendsBox.prototype = $extend(mp4lib_ContainerBox.prototype,{
});
var mp4lib_TrackFragmentBox = function(size) {
	mp4lib_ContainerBox.call(this,"traf",size);
};
mp4lib_TrackFragmentBox.__name__ = true;
mp4lib_TrackFragmentBox.__super__ = mp4lib_ContainerBox;
mp4lib_TrackFragmentBox.prototype = $extend(mp4lib_ContainerBox.prototype,{
});
var mp4lib_ContainerFullBox = function(boxType,size,isEntryCount) {
	if(isEntryCount == null) {
		isEntryCount = false;
	}
	this.entry_count = 0;
	this.boxes = null;
	mp4lib_FullBox.call(this,boxType,size);
	this.isEntryCount = isEntryCount;
	this.boxes = [];
};
mp4lib_ContainerFullBox.__name__ = true;
mp4lib_ContainerFullBox.__super__ = mp4lib_FullBox;
mp4lib_ContainerFullBox.prototype = $extend(mp4lib_FullBox.prototype,{
	write: function(data,pos) {
		mp4lib_FullBox.prototype.write.call(this,data,pos);
		if(this.isEntryCount) {
			this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.entry_count,{ fileName : "./src/mp4lib/ContainerFullBox.hx", lineNumber : 19, className : "mp4lib.ContainerFullBox", methodName : "write"});
		}
		var _g = 0;
		var _g1 = this.boxes.length;
		while(_g < _g1) {
			var i = _g++;
			this.localPos = this.boxes[i].write(data,this.localPos);
		}
		return this.localPos;
	}
	,read: function(data,pos,end) {
		mp4lib_FullBox.prototype.read.call(this,data,pos,end);
		var size = 0;
		var uuidFieldPos = 0;
		var uuid = null;
		var boxtype;
		var box;
		if(this.isEntryCount) {
			this.entry_count = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		}
		while(this.localPos < this.localEnd) {
			size = mp4lib_Fields.FIELD_UINT32.read(data,this.localPos);
			boxtype = mp4lib_Fields.readString(data,this.localPos + 4,4);
			if(boxtype == "uuid") {
				uuidFieldPos = size == 1 ? 16 : 8;
				uuid = new mp4lib_fields_ArrayField(mp4lib_Fields.FIELD_INT8,16).read(data,this.localPos + uuidFieldPos,this.localPos + uuidFieldPos + 16);
				uuid = JSON.stringify(uuid);
			}
			box = Mp4lib.createBox(boxtype,size,uuid);
			if(boxtype == "uuid") {
				this.localPos = box.read(data,this.localPos + mp4lib_Fields.FIELD_INT8.getLength() * 16 + 8,this.localPos + size);
				uuid = null;
			} else {
				this.localPos = box.read(data,this.localPos + 8,this.localPos + size);
			}
			if(box.boxtype != null) {
				this.boxes.push(box);
			}
			if(box.size <= 0 || box.size == null) {
				throw new js__$Boot_HaxeError("Problem on size of box " + box.boxtype + ", parsing stopped to avoid infinite loop");
			}
		}
		return this.localPos;
	}
	,computeLength: function() {
		mp4lib_FullBox.prototype.computeLength.call(this);
		if(this.isEntryCount) {
			this.size += mp4lib_Fields.FIELD_UINT32.getLength();
		}
		var _g = 0;
		var _g1 = this.boxes.length;
		while(_g < _g1) {
			var i = _g++;
			this.boxes[i].computeLength();
			this.size += this.boxes[i].size;
		}
	}
});
var mp4lib_MetaBox = function(size) {
	mp4lib_ContainerFullBox.call(this,"meta",size);
};
mp4lib_MetaBox.__name__ = true;
mp4lib_MetaBox.__super__ = mp4lib_ContainerFullBox;
mp4lib_MetaBox.prototype = $extend(mp4lib_ContainerFullBox.prototype,{
});
var mp4lib_MovieHeaderBox = function(size) {
	this.next_track_ID = 0;
	this.pre_defined = [0,0,0,0,0,0];
	this.matrix = [65536,0,0,0,65536,0,0,0,1073741824];
	this.reserved_2 = [0,0];
	this.reserved = 0;
	this.volume = 256;
	this.rate = 65536;
	this.duration = new haxe__$Int64__$_$_$Int64(0,0);
	this.timescale = 0;
	this.modification_time = new haxe__$Int64__$_$_$Int64(0,0);
	this.creation_time = new haxe__$Int64__$_$_$Int64(0,0);
	mp4lib_FullBox.call(this,"mvhd",size);
};
mp4lib_MovieHeaderBox.__name__ = true;
mp4lib_MovieHeaderBox.__super__ = mp4lib_FullBox;
mp4lib_MovieHeaderBox.prototype = $extend(mp4lib_FullBox.prototype,{
	computeLength: function() {
		mp4lib_FullBox.prototype.computeLength.call(this);
		this.size += mp4lib_Fields.FIELD_INT32.getLength() + mp4lib_Fields.FIELD_INT16.getLength() * 2;
		this.size += mp4lib_Fields.FIELD_INT32.getLength() * 2 + mp4lib_Fields.FIELD_INT32.getLength() * 9;
		this.size += mp4lib_Fields.FIELD_BIT32.getLength() * 6 + mp4lib_Fields.FIELD_UINT32.getLength();
		if(this.version == 1) {
			this.size += mp4lib_Fields.FIELD_UINT64.getLength() * 3 + mp4lib_Fields.FIELD_UINT32.getLength();
		} else {
			this.size += mp4lib_Fields.FIELD_UINT32.getLength() * 4;
		}
	}
	,read: function(data,pos,end) {
		mp4lib_FullBox.prototype.read.call(this,data,pos,end);
		if(this.version == 1) {
			this.creation_time = this._readData(data,mp4lib_Fields.FIELD_UINT64);
			this.modification_time = this._readData(data,mp4lib_Fields.FIELD_UINT64);
			this.timescale = this._readData(data,mp4lib_Fields.FIELD_UINT32);
			this.duration = this._readData(data,mp4lib_Fields.FIELD_UINT64);
		} else {
			this.creation_time = this._readData(data,mp4lib_Fields.FIELD_UINT32);
			this.modification_time = this._readData(data,mp4lib_Fields.FIELD_UINT32);
			this.timescale = this._readData(data,mp4lib_Fields.FIELD_UINT32);
			this.duration = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		}
		this.rate = this._readData(data,mp4lib_Fields.FIELD_INT32);
		this.volume = this._readData(data,mp4lib_Fields.FIELD_INT16);
		this.reserved = this._readData(data,mp4lib_Fields.FIELD_INT16);
		this.reserved_2 = this._readArrayFieldData(data,mp4lib_Fields.FIELD_INT32,2);
		this.matrix = this._readArrayFieldData(data,mp4lib_Fields.FIELD_INT32,9);
		this.pre_defined = this._readArrayFieldData(data,mp4lib_Fields.FIELD_BIT32,6);
		this.next_track_ID = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		return this.localPos;
	}
	,write: function(data,pos) {
		mp4lib_FullBox.prototype.write.call(this,data,pos);
		if(this.version == 1) {
			this._writeData(data,mp4lib_Fields.FIELD_UINT64,this.creation_time,{ fileName : "./src/mp4lib/MovieHeaderBox.hx", lineNumber : 62, className : "mp4lib.MovieHeaderBox", methodName : "write"});
			this._writeData(data,mp4lib_Fields.FIELD_UINT64,this.modification_time,{ fileName : "./src/mp4lib/MovieHeaderBox.hx", lineNumber : 63, className : "mp4lib.MovieHeaderBox", methodName : "write"});
			this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.timescale,{ fileName : "./src/mp4lib/MovieHeaderBox.hx", lineNumber : 64, className : "mp4lib.MovieHeaderBox", methodName : "write"});
			this._writeData(data,mp4lib_Fields.FIELD_UINT64,this.duration,{ fileName : "./src/mp4lib/MovieHeaderBox.hx", lineNumber : 65, className : "mp4lib.MovieHeaderBox", methodName : "write"});
		} else {
			this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.creation_time,{ fileName : "./src/mp4lib/MovieHeaderBox.hx", lineNumber : 67, className : "mp4lib.MovieHeaderBox", methodName : "write"});
			this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.modification_time,{ fileName : "./src/mp4lib/MovieHeaderBox.hx", lineNumber : 68, className : "mp4lib.MovieHeaderBox", methodName : "write"});
			this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.timescale,{ fileName : "./src/mp4lib/MovieHeaderBox.hx", lineNumber : 69, className : "mp4lib.MovieHeaderBox", methodName : "write"});
			this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.duration,{ fileName : "./src/mp4lib/MovieHeaderBox.hx", lineNumber : 70, className : "mp4lib.MovieHeaderBox", methodName : "write"});
		}
		this._writeData(data,mp4lib_Fields.FIELD_INT32,this.rate,{ fileName : "./src/mp4lib/MovieHeaderBox.hx", lineNumber : 73, className : "mp4lib.MovieHeaderBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_INT16,this.volume,{ fileName : "./src/mp4lib/MovieHeaderBox.hx", lineNumber : 74, className : "mp4lib.MovieHeaderBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_INT16,this.reserved,{ fileName : "./src/mp4lib/MovieHeaderBox.hx", lineNumber : 75, className : "mp4lib.MovieHeaderBox", methodName : "write"});
		this._writeArrayData(data,mp4lib_Fields.FIELD_INT32,this.reserved_2);
		this._writeArrayData(data,mp4lib_Fields.FIELD_INT32,this.matrix);
		this._writeArrayData(data,mp4lib_Fields.FIELD_BIT32,this.pre_defined);
		this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.next_track_ID,{ fileName : "./src/mp4lib/MovieHeaderBox.hx", lineNumber : 79, className : "mp4lib.MovieHeaderBox", methodName : "write"});
		return this.localPos;
	}
});
var mp4lib_MediaDataBox = function(size) {
	mp4lib_Box.call(this,"mdat",size);
};
mp4lib_MediaDataBox.__name__ = true;
mp4lib_MediaDataBox.__super__ = mp4lib_Box;
mp4lib_MediaDataBox.prototype = $extend(mp4lib_Box.prototype,{
	computeLength: function() {
		mp4lib_Box.prototype.computeLength.call(this);
		this.size += this.data.length;
	}
	,read: function(data,pos,end) {
		this.data = haxe_io__$UInt8Array_UInt8Array_$Impl_$.fromBytes(haxe_io_Bytes.ofData(new Uint8Array(data.buffer.slice(pos,end == null ? null : pos + end)).buffer));
		return end;
	}
	,write: function(data,pos) {
		mp4lib_Box.prototype.write.call(this,data,pos);
		this._writeBuffer(data,this.data,this.data.length);
		return this.localPos;
	}
});
var mp4lib_FreeSpaceBox = function(size) {
	mp4lib_Box.call(this,"free",size);
};
mp4lib_FreeSpaceBox.__name__ = true;
mp4lib_FreeSpaceBox.__super__ = mp4lib_Box;
mp4lib_FreeSpaceBox.prototype = $extend(mp4lib_Box.prototype,{
	computeLength: function() {
		mp4lib_Box.prototype.computeLength.call(this);
		this.size += this.data.length;
	}
	,read: function(data,pos,end) {
		this.localPos = pos;
		this.localEnd = end;
		var begin = this.localPos;
		var length = this.localEnd;
		this.data = haxe_io__$UInt8Array_UInt8Array_$Impl_$.fromBytes(haxe_io_Bytes.ofData(new Uint8Array(data.buffer.slice(begin,length == null ? null : begin + length)).buffer));
		return this.localEnd;
	}
	,write: function(data,pos) {
		mp4lib_Box.prototype.write.call(this,data,pos);
		this._writeBuffer(data,this.data,this.data.length);
		return this.localPos;
	}
});
var mp4lib_SegmentIndexBox = function(size) {
	mp4lib_FullBox.call(this,"sidx",size);
};
mp4lib_SegmentIndexBox.__name__ = true;
mp4lib_SegmentIndexBox.__super__ = mp4lib_FullBox;
mp4lib_SegmentIndexBox.prototype = $extend(mp4lib_FullBox.prototype,{
	computeLength: function() {
		mp4lib_FullBox.prototype.computeLength.call(this);
		this.size += mp4lib_Fields.FIELD_UINT32.getLength() * 2;
		if(this.version == 1) {
			this.size += mp4lib_Fields.FIELD_UINT64.getLength() * 2;
		} else {
			this.size += mp4lib_Fields.FIELD_UINT32.getLength() * 2;
		}
		this.size += mp4lib_Fields.FIELD_UINT16.getLength();
		this.size += mp4lib_Fields.FIELD_UINT16.getLength();
		this.size += (mp4lib_Fields.FIELD_UINT64.getLength() + mp4lib_Fields.FIELD_UINT32.getLength()) * this.reference_count;
	}
	,read: function(data,pos,end) {
		mp4lib_FullBox.prototype.read.call(this,data,pos,end);
		this.reference_ID = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		this.timescale = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		if(this.version == 1) {
			this.earliest_presentation_time = this._readData(data,mp4lib_Fields.FIELD_UINT64);
			this.first_offset = this._readData(data,mp4lib_Fields.FIELD_UINT64);
		} else {
			this.earliest_presentation_time = this._readData(data,mp4lib_Fields.FIELD_UINT32);
			this.first_offset = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		}
		this.reserved = this._readData(data,mp4lib_Fields.FIELD_UINT16);
		this.reference_count = this._readData(data,mp4lib_Fields.FIELD_UINT16);
		this.references = [];
		var _g = 0;
		var _g1 = this.reference_count;
		while(_g < _g1) {
			var i = _g++;
			var struct = { reference_info : null, SAP : null};
			struct.reference_info = this._readData(data,mp4lib_Fields.FIELD_UINT64);
			struct.SAP = this._readData(data,mp4lib_Fields.FIELD_UINT32);
			this.references.push(struct);
		}
		return this.localPos;
	}
	,write: function(data,pos) {
		mp4lib_FullBox.prototype.write.call(this,data,pos);
		this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.reference_ID,{ fileName : "./src/mp4lib/SegmentIndexBox.hx", lineNumber : 66, className : "mp4lib.SegmentIndexBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.timescale,{ fileName : "./src/mp4lib/SegmentIndexBox.hx", lineNumber : 67, className : "mp4lib.SegmentIndexBox", methodName : "write"});
		if(this.version == 1) {
			this._writeData(data,mp4lib_Fields.FIELD_UINT64,this.earliest_presentation_time,{ fileName : "./src/mp4lib/SegmentIndexBox.hx", lineNumber : 70, className : "mp4lib.SegmentIndexBox", methodName : "write"});
			this._writeData(data,mp4lib_Fields.FIELD_UINT64,this.first_offset,{ fileName : "./src/mp4lib/SegmentIndexBox.hx", lineNumber : 71, className : "mp4lib.SegmentIndexBox", methodName : "write"});
		} else {
			this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.earliest_presentation_time,{ fileName : "./src/mp4lib/SegmentIndexBox.hx", lineNumber : 73, className : "mp4lib.SegmentIndexBox", methodName : "write"});
			this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.first_offset,{ fileName : "./src/mp4lib/SegmentIndexBox.hx", lineNumber : 74, className : "mp4lib.SegmentIndexBox", methodName : "write"});
		}
		this._writeData(data,mp4lib_Fields.FIELD_UINT16,this.reserved,{ fileName : "./src/mp4lib/SegmentIndexBox.hx", lineNumber : 77, className : "mp4lib.SegmentIndexBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_UINT16,this.reference_count,{ fileName : "./src/mp4lib/SegmentIndexBox.hx", lineNumber : 78, className : "mp4lib.SegmentIndexBox", methodName : "write"});
		var _g = 0;
		var _g1 = this.reference_count;
		while(_g < _g1) {
			var i = _g++;
			this._writeData(data,mp4lib_Fields.FIELD_UINT64,this.references[i].reference_info,{ fileName : "./src/mp4lib/SegmentIndexBox.hx", lineNumber : 81, className : "mp4lib.SegmentIndexBox", methodName : "write"});
			this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.references[i].SAP,{ fileName : "./src/mp4lib/SegmentIndexBox.hx", lineNumber : 82, className : "mp4lib.SegmentIndexBox", methodName : "write"});
		}
		return this.localPos;
	}
});
var mp4lib_TrackHeaderBox = function(size) {
	mp4lib_FullBox.call(this,"tkhd",size);
};
mp4lib_TrackHeaderBox.__name__ = true;
mp4lib_TrackHeaderBox.__super__ = mp4lib_FullBox;
mp4lib_TrackHeaderBox.prototype = $extend(mp4lib_FullBox.prototype,{
	computeLength: function() {
		mp4lib_FullBox.prototype.computeLength.call(this);
		this.size += mp4lib_Fields.FIELD_INT16.getLength() * 4 + mp4lib_Fields.FIELD_INT32.getLength() * 2 + mp4lib_Fields.FIELD_UINT32.getLength() * 2 + mp4lib_Fields.FIELD_INT32.getLength() * 9;
		if(this.version == 1) {
			this.size += mp4lib_Fields.FIELD_UINT64.getLength() * 3 + mp4lib_Fields.FIELD_UINT32.getLength() * 2;
		} else {
			this.size += mp4lib_Fields.FIELD_UINT32.getLength() * 5;
		}
	}
	,read: function(data,pos,end) {
		mp4lib_FullBox.prototype.read.call(this,data,pos,end);
		if(this.version == 1) {
			this.creation_time = this._readData(data,mp4lib_Fields.FIELD_UINT64);
			this.modification_time = this._readData(data,mp4lib_Fields.FIELD_UINT64);
			this.track_id = this._readData(data,mp4lib_Fields.FIELD_UINT32);
			this.reserved = this._readData(data,mp4lib_Fields.FIELD_UINT32);
			this.duration = this._readData(data,mp4lib_Fields.FIELD_UINT64);
		} else {
			this.creation_time = this._readData(data,mp4lib_Fields.FIELD_UINT32);
			this.modification_time = this._readData(data,mp4lib_Fields.FIELD_UINT32);
			this.track_id = this._readData(data,mp4lib_Fields.FIELD_UINT32);
			this.reserved = this._readData(data,mp4lib_Fields.FIELD_UINT32);
			this.duration = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		}
		this.reserved_2 = this._readArrayFieldData(data,mp4lib_Fields.FIELD_UINT32,2);
		this.layer = this._readData(data,mp4lib_Fields.FIELD_INT16);
		this.alternate_group = this._readData(data,mp4lib_Fields.FIELD_INT16);
		this.volume = this._readData(data,mp4lib_Fields.FIELD_INT16);
		this.reserved_3 = this._readData(data,mp4lib_Fields.FIELD_INT16);
		this.matrix = this._readArrayFieldData(data,mp4lib_Fields.FIELD_INT32,9);
		this.width = this._readData(data,mp4lib_Fields.FIELD_INT32);
		this.height = this._readData(data,mp4lib_Fields.FIELD_INT32);
		return this.localPos;
	}
	,write: function(data,pos) {
		mp4lib_FullBox.prototype.write.call(this,data,pos);
		if(this.version == 1) {
			this._writeData(data,mp4lib_Fields.FIELD_UINT64,this.creation_time,{ fileName : "./src/mp4lib/TrackHeaderBox.hx", lineNumber : 62, className : "mp4lib.TrackHeaderBox", methodName : "write"});
			this._writeData(data,mp4lib_Fields.FIELD_UINT64,this.modification_time,{ fileName : "./src/mp4lib/TrackHeaderBox.hx", lineNumber : 63, className : "mp4lib.TrackHeaderBox", methodName : "write"});
			this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.track_id,{ fileName : "./src/mp4lib/TrackHeaderBox.hx", lineNumber : 64, className : "mp4lib.TrackHeaderBox", methodName : "write"});
			this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.reserved,{ fileName : "./src/mp4lib/TrackHeaderBox.hx", lineNumber : 65, className : "mp4lib.TrackHeaderBox", methodName : "write"});
			this._writeData(data,mp4lib_Fields.FIELD_UINT64,this.duration,{ fileName : "./src/mp4lib/TrackHeaderBox.hx", lineNumber : 66, className : "mp4lib.TrackHeaderBox", methodName : "write"});
		} else {
			this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.creation_time,{ fileName : "./src/mp4lib/TrackHeaderBox.hx", lineNumber : 68, className : "mp4lib.TrackHeaderBox", methodName : "write"});
			this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.modification_time,{ fileName : "./src/mp4lib/TrackHeaderBox.hx", lineNumber : 69, className : "mp4lib.TrackHeaderBox", methodName : "write"});
			this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.track_id,{ fileName : "./src/mp4lib/TrackHeaderBox.hx", lineNumber : 70, className : "mp4lib.TrackHeaderBox", methodName : "write"});
			this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.reserved,{ fileName : "./src/mp4lib/TrackHeaderBox.hx", lineNumber : 71, className : "mp4lib.TrackHeaderBox", methodName : "write"});
			this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.duration,{ fileName : "./src/mp4lib/TrackHeaderBox.hx", lineNumber : 72, className : "mp4lib.TrackHeaderBox", methodName : "write"});
		}
		this._writeArrayData(data,mp4lib_Fields.FIELD_UINT32,this.reserved_2);
		this._writeData(data,mp4lib_Fields.FIELD_INT16,this.layer,{ fileName : "./src/mp4lib/TrackHeaderBox.hx", lineNumber : 76, className : "mp4lib.TrackHeaderBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_INT16,this.alternate_group,{ fileName : "./src/mp4lib/TrackHeaderBox.hx", lineNumber : 77, className : "mp4lib.TrackHeaderBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_INT16,this.volume,{ fileName : "./src/mp4lib/TrackHeaderBox.hx", lineNumber : 78, className : "mp4lib.TrackHeaderBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_INT16,this.reserved_3,{ fileName : "./src/mp4lib/TrackHeaderBox.hx", lineNumber : 79, className : "mp4lib.TrackHeaderBox", methodName : "write"});
		this._writeArrayData(data,mp4lib_Fields.FIELD_INT32,this.matrix);
		this._writeData(data,mp4lib_Fields.FIELD_INT32,this.width,{ fileName : "./src/mp4lib/TrackHeaderBox.hx", lineNumber : 81, className : "mp4lib.TrackHeaderBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_INT32,this.height,{ fileName : "./src/mp4lib/TrackHeaderBox.hx", lineNumber : 82, className : "mp4lib.TrackHeaderBox", methodName : "write"});
		return this.localPos;
	}
});
var mp4lib_MediaHeaderBox = function(size) {
	mp4lib_FullBox.call(this,"mdhd",size);
};
mp4lib_MediaHeaderBox.__name__ = true;
mp4lib_MediaHeaderBox.__super__ = mp4lib_FullBox;
mp4lib_MediaHeaderBox.prototype = $extend(mp4lib_FullBox.prototype,{
	computeLength: function() {
		mp4lib_FullBox.prototype.computeLength.call(this);
		this.size += mp4lib_Fields.FIELD_UINT16.getLength() * 2;
		if(this.version == 1) {
			this.size += mp4lib_Fields.FIELD_UINT64.getLength() * 3 + mp4lib_Fields.FIELD_UINT32.getLength();
		} else {
			this.size += mp4lib_Fields.FIELD_UINT32.getLength() * 4;
		}
	}
	,read: function(data,pos,end) {
		mp4lib_FullBox.prototype.read.call(this,data,pos,end);
		if(this.version == 1) {
			this.creation_time = this._readData(data,mp4lib_Fields.FIELD_UINT64);
			this.modification_time = this._readData(data,mp4lib_Fields.FIELD_UINT64);
			this.timescale = this._readData(data,mp4lib_Fields.FIELD_UINT32);
			this.duration = this._readData(data,mp4lib_Fields.FIELD_UINT64);
		} else {
			this.creation_time = this._readData(data,mp4lib_Fields.FIELD_UINT32);
			this.modification_time = this._readData(data,mp4lib_Fields.FIELD_UINT32);
			this.timescale = this._readData(data,mp4lib_Fields.FIELD_UINT32);
			this.duration = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		}
		this.language = this._readData(data,mp4lib_Fields.FIELD_UINT16);
		this.pre_defined = this._readData(data,mp4lib_Fields.FIELD_UINT16);
		return this.localPos;
	}
	,write: function(data,pos) {
		mp4lib_FullBox.prototype.write.call(this,data,pos);
		if(this.version == 1) {
			this._writeData(data,mp4lib_Fields.FIELD_UINT64,this.creation_time,{ fileName : "./src/mp4lib/MediaHeaderBox.hx", lineNumber : 49, className : "mp4lib.MediaHeaderBox", methodName : "write"});
			this._writeData(data,mp4lib_Fields.FIELD_UINT64,this.modification_time,{ fileName : "./src/mp4lib/MediaHeaderBox.hx", lineNumber : 50, className : "mp4lib.MediaHeaderBox", methodName : "write"});
			this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.timescale,{ fileName : "./src/mp4lib/MediaHeaderBox.hx", lineNumber : 51, className : "mp4lib.MediaHeaderBox", methodName : "write"});
			this._writeData(data,mp4lib_Fields.FIELD_UINT64,this.duration,{ fileName : "./src/mp4lib/MediaHeaderBox.hx", lineNumber : 52, className : "mp4lib.MediaHeaderBox", methodName : "write"});
		} else {
			this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.creation_time,{ fileName : "./src/mp4lib/MediaHeaderBox.hx", lineNumber : 54, className : "mp4lib.MediaHeaderBox", methodName : "write"});
			this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.modification_time,{ fileName : "./src/mp4lib/MediaHeaderBox.hx", lineNumber : 55, className : "mp4lib.MediaHeaderBox", methodName : "write"});
			this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.timescale,{ fileName : "./src/mp4lib/MediaHeaderBox.hx", lineNumber : 56, className : "mp4lib.MediaHeaderBox", methodName : "write"});
			this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.duration,{ fileName : "./src/mp4lib/MediaHeaderBox.hx", lineNumber : 57, className : "mp4lib.MediaHeaderBox", methodName : "write"});
		}
		this._writeData(data,mp4lib_Fields.FIELD_UINT16,this.language,{ fileName : "./src/mp4lib/MediaHeaderBox.hx", lineNumber : 60, className : "mp4lib.MediaHeaderBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_UINT16,this.pre_defined,{ fileName : "./src/mp4lib/MediaHeaderBox.hx", lineNumber : 61, className : "mp4lib.MediaHeaderBox", methodName : "write"});
		return this.localPos;
	}
});
var mp4lib_MovieExtendsHeaderBox = function(size) {
	mp4lib_FullBox.call(this,"mehd",size);
};
mp4lib_MovieExtendsHeaderBox.__name__ = true;
mp4lib_MovieExtendsHeaderBox.__super__ = mp4lib_FullBox;
mp4lib_MovieExtendsHeaderBox.prototype = $extend(mp4lib_FullBox.prototype,{
	computeLength: function() {
		mp4lib_FullBox.prototype.computeLength.call(this);
		if(this.version == 1) {
			this.size += mp4lib_Fields.FIELD_UINT64.getLength();
		} else {
			this.size += mp4lib_Fields.FIELD_UINT32.getLength();
		}
	}
	,read: function(data,pos,end) {
		mp4lib_FullBox.prototype.read.call(this,data,pos,end);
		if(this.version == 1) {
			this.fragment_duration = this._readData(data,mp4lib_Fields.FIELD_UINT64);
		} else {
			this.fragment_duration = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		}
		return this.localPos;
	}
	,write: function(data,pos) {
		mp4lib_FullBox.prototype.write.call(this,data,pos);
		if(this.version == 1) {
			this._writeData(data,mp4lib_Fields.FIELD_UINT64,this.fragment_duration,{ fileName : "./src/mp4lib/MovieExtendsHeaderBox.hx", lineNumber : 31, className : "mp4lib.MovieExtendsHeaderBox", methodName : "write"});
		} else {
			this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.fragment_duration,{ fileName : "./src/mp4lib/MovieExtendsHeaderBox.hx", lineNumber : 33, className : "mp4lib.MovieExtendsHeaderBox", methodName : "write"});
		}
		return this.localPos;
	}
});
var mp4lib_HandlerBox = function(size) {
	this.name = null;
	this.reserved = null;
	mp4lib_FullBox.call(this,"hdlr",size);
};
mp4lib_HandlerBox.__name__ = true;
mp4lib_HandlerBox.__super__ = mp4lib_FullBox;
mp4lib_HandlerBox.prototype = $extend(mp4lib_FullBox.prototype,{
	computeLength: function() {
		mp4lib_FullBox.prototype.computeLength.call(this);
		this.size += mp4lib_Fields.FIELD_UINT32.getLength() * 2 + mp4lib_Fields.FIELD_UINT32.getLength() * 3 + mp4lib_Fields.FIELD_STRING.getLength(this.name);
	}
	,write: function(data,pos) {
		mp4lib_FullBox.prototype.write.call(this,data,pos);
		this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.pre_defined,{ fileName : "./src/mp4lib/HandlerBox.hx", lineNumber : 27, className : "mp4lib.HandlerBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.handler_type,{ fileName : "./src/mp4lib/HandlerBox.hx", lineNumber : 28, className : "mp4lib.HandlerBox", methodName : "write"});
		this._writeArrayData(data,mp4lib_Fields.FIELD_UINT32,this.reserved);
		this._writeData(data,mp4lib_Fields.FIELD_STRING,this.name,{ fileName : "./src/mp4lib/HandlerBox.hx", lineNumber : 30, className : "mp4lib.HandlerBox", methodName : "write"});
		return this.localPos;
	}
	,read: function(data,pos,end) {
		mp4lib_FullBox.prototype.read.call(this,data,pos,end);
		this.pre_defined = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		this.handler_type = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		this.reserved = this._readArrayFieldData(data,mp4lib_Fields.FIELD_UINT32,3);
		this.name = this._readData(data,mp4lib_Fields.FIELD_STRING);
		return this.localPos;
	}
});
var mp4lib_TimeToSampleBox = function(size) {
	this.entry_count = null;
	this.entry = null;
	mp4lib_FullBox.call(this,"stts",size);
};
mp4lib_TimeToSampleBox.__name__ = true;
mp4lib_TimeToSampleBox.__super__ = mp4lib_FullBox;
mp4lib_TimeToSampleBox.prototype = $extend(mp4lib_FullBox.prototype,{
	computeLength: function() {
		mp4lib_FullBox.prototype.computeLength.call(this);
		var a = this.size += mp4lib_Fields.FIELD_UINT32.getLength();
		var a1 = this.entry_count;
		var b = mp4lib_Fields.FIELD_UINT32.getLength() * 2;
		this.size = a + haxe__$Int32_Int32_$Impl_$._mul(a1,b) | 0;
	}
	,write: function(data,pos) {
		mp4lib_FullBox.prototype.write.call(this,data,pos);
		this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.entry_count,{ fileName : "./src/mp4lib/TimeToSampleBox.hx", lineNumber : 24, className : "mp4lib.TimeToSampleBox", methodName : "write"});
		var _g = 0;
		var _g1 = this.entry_count;
		while(_g < _g1) {
			var i = _g++;
			this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.entry[i].sample_count,{ fileName : "./src/mp4lib/TimeToSampleBox.hx", lineNumber : 27, className : "mp4lib.TimeToSampleBox", methodName : "write"});
			this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.entry[i].sample_delta,{ fileName : "./src/mp4lib/TimeToSampleBox.hx", lineNumber : 28, className : "mp4lib.TimeToSampleBox", methodName : "write"});
		}
		return this.localPos;
	}
	,read: function(data,pos,end) {
		mp4lib_FullBox.prototype.read.call(this,data,pos,end);
		this.entry_count = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		this.entry = [];
		var _g = 0;
		var _g1 = this.entry_count;
		while(_g < _g1) {
			var i = _g++;
			this.entry.push({ sample_count : this._readData(data,mp4lib_Fields.FIELD_UINT32), sample_delta : this._readData(data,mp4lib_Fields.FIELD_UINT32)});
		}
		return this.localPos;
	}
});
var mp4lib_SampleToChunkBox = function(size) {
	this.entry_count = null;
	this.entry = null;
	mp4lib_FullBox.call(this,"stsc",size);
};
mp4lib_SampleToChunkBox.__name__ = true;
mp4lib_SampleToChunkBox.__super__ = mp4lib_FullBox;
mp4lib_SampleToChunkBox.prototype = $extend(mp4lib_FullBox.prototype,{
	computeLength: function() {
		mp4lib_FullBox.prototype.computeLength.call(this);
		var a = this.size += mp4lib_Fields.FIELD_UINT32.getLength();
		var a1 = this.entry_count;
		var b = mp4lib_Fields.FIELD_UINT32.getLength() * 3;
		this.size = a + haxe__$Int32_Int32_$Impl_$._mul(a1,b) | 0;
	}
	,write: function(data,pos) {
		mp4lib_FullBox.prototype.write.call(this,data,pos);
		this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.entry_count,{ fileName : "./src/mp4lib/SampleToChunkBox.hx", lineNumber : 24, className : "mp4lib.SampleToChunkBox", methodName : "write"});
		var _g = 0;
		var _g1 = this.entry_count;
		while(_g < _g1) {
			var i = _g++;
			this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.entry[i].first_chunk,{ fileName : "./src/mp4lib/SampleToChunkBox.hx", lineNumber : 26, className : "mp4lib.SampleToChunkBox", methodName : "write"});
			this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.entry[i].samples_per_chunk,{ fileName : "./src/mp4lib/SampleToChunkBox.hx", lineNumber : 27, className : "mp4lib.SampleToChunkBox", methodName : "write"});
			this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.entry[i].samples_description_index,{ fileName : "./src/mp4lib/SampleToChunkBox.hx", lineNumber : 28, className : "mp4lib.SampleToChunkBox", methodName : "write"});
		}
		return this.localPos;
	}
	,read: function(data,pos,end) {
		mp4lib_FullBox.prototype.read.call(this,data,pos,end);
		this.entry_count = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		this.entry = [];
		var _g = 0;
		var _g1 = this.entry_count;
		while(_g < _g1) {
			var i = _g++;
			this.entry.push({ first_chunk : this._readData(data,mp4lib_Fields.FIELD_UINT32), samples_per_chunk : this._readData(data,mp4lib_Fields.FIELD_UINT32), samples_description_index : this._readData(data,mp4lib_Fields.FIELD_UINT32)});
		}
		return this.localPos;
	}
});
var mp4lib_ChunkOffsetBox = function(size) {
	this.chunk_offset = null;
	this.entry_count = null;
	mp4lib_FullBox.call(this,"stco",size);
};
mp4lib_ChunkOffsetBox.__name__ = true;
mp4lib_ChunkOffsetBox.__super__ = mp4lib_FullBox;
mp4lib_ChunkOffsetBox.prototype = $extend(mp4lib_FullBox.prototype,{
	computeLength: function() {
		mp4lib_FullBox.prototype.computeLength.call(this);
		var a = this.size;
		var a1 = mp4lib_Fields.FIELD_UINT32.getLength();
		var a2 = this.entry_count;
		var b = mp4lib_Fields.FIELD_UINT32.getLength();
		this.size = a + (a1 + haxe__$Int32_Int32_$Impl_$._mul(a2,b) | 0) | 0;
	}
	,write: function(data,pos) {
		mp4lib_FullBox.prototype.write.call(this,data,pos);
		this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.entry_count,{ fileName : "./src/mp4lib/ChunkOffsetBox.hx", lineNumber : 19, className : "mp4lib.ChunkOffsetBox", methodName : "write"});
		var _g = 0;
		var _g1 = this.entry_count;
		while(_g < _g1) {
			var i = _g++;
			this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.chunk_offset[i],{ fileName : "./src/mp4lib/ChunkOffsetBox.hx", lineNumber : 22, className : "mp4lib.ChunkOffsetBox", methodName : "write"});
		}
		return this.localPos;
	}
	,read: function(data,pos,end) {
		mp4lib_FullBox.prototype.read.call(this,data,pos,end);
		this.entry_count = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		this.chunk_offset = this._readArrayFieldData(data,mp4lib_Fields.FIELD_UINT32,this.entry_count);
		return this.localPos;
	}
});
var mp4lib_TrackExtendsBox = function(size) {
	mp4lib_FullBox.call(this,"trex",size);
};
mp4lib_TrackExtendsBox.__name__ = true;
mp4lib_TrackExtendsBox.__super__ = mp4lib_FullBox;
mp4lib_TrackExtendsBox.prototype = $extend(mp4lib_FullBox.prototype,{
	computeLength: function() {
		mp4lib_FullBox.prototype.computeLength.call(this);
		this.size += mp4lib_Fields.FIELD_UINT32.getLength() * 5;
	}
	,write: function(data,pos) {
		mp4lib_FullBox.prototype.write.call(this,data,pos);
		this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.track_ID,{ fileName : "./src/mp4lib/TrackExtendsBox.hx", lineNumber : 19, className : "mp4lib.TrackExtendsBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.default_sample_description_index,{ fileName : "./src/mp4lib/TrackExtendsBox.hx", lineNumber : 20, className : "mp4lib.TrackExtendsBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.default_sample_duration,{ fileName : "./src/mp4lib/TrackExtendsBox.hx", lineNumber : 21, className : "mp4lib.TrackExtendsBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.default_sample_size,{ fileName : "./src/mp4lib/TrackExtendsBox.hx", lineNumber : 22, className : "mp4lib.TrackExtendsBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.default_sample_flags,{ fileName : "./src/mp4lib/TrackExtendsBox.hx", lineNumber : 23, className : "mp4lib.TrackExtendsBox", methodName : "write"});
		return this.localPos;
	}
	,read: function(data,pos,end) {
		mp4lib_FullBox.prototype.read.call(this,data,pos,end);
		this.track_ID = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		this.default_sample_description_index = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		this.default_sample_duration = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		this.default_sample_size = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		this.default_sample_flags = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		return this.localPos;
	}
});
var mp4lib_VideoMediaHeaderBox = function(size) {
	this.opcolor = null;
	this.graphicsmode = null;
	mp4lib_FullBox.call(this,"vmhd",size);
};
mp4lib_VideoMediaHeaderBox.__name__ = true;
mp4lib_VideoMediaHeaderBox.__super__ = mp4lib_FullBox;
mp4lib_VideoMediaHeaderBox.prototype = $extend(mp4lib_FullBox.prototype,{
	computeLength: function() {
		mp4lib_FullBox.prototype.computeLength.call(this);
		this.size += mp4lib_Fields.FIELD_INT16.getLength() + mp4lib_Fields.FIELD_UINT16.getLength() * 3;
	}
	,write: function(data,pos) {
		mp4lib_FullBox.prototype.write.call(this,data,pos);
		this._writeData(data,mp4lib_Fields.FIELD_INT16,this.graphicsmode,{ fileName : "./src/mp4lib/VideoMediaHeaderBox.hx", lineNumber : 19, className : "mp4lib.VideoMediaHeaderBox", methodName : "write"});
		this._writeArrayData(data,mp4lib_Fields.FIELD_UINT16,this.opcolor);
		return this.localPos;
	}
	,read: function(data,pos,end) {
		mp4lib_FullBox.prototype.read.call(this,data,pos,end);
		this.graphicsmode = this._readData(data,mp4lib_Fields.FIELD_INT16);
		this.opcolor = this._readArrayFieldData(data,mp4lib_Fields.FIELD_UINT16,3);
		return this.localPos;
	}
});
var mp4lib_SoundMediaHeaderBox = function(size) {
	mp4lib_FullBox.call(this,"smhd",size);
};
mp4lib_SoundMediaHeaderBox.__name__ = true;
mp4lib_SoundMediaHeaderBox.__super__ = mp4lib_FullBox;
mp4lib_SoundMediaHeaderBox.prototype = $extend(mp4lib_FullBox.prototype,{
	computeLength: function() {
		mp4lib_FullBox.prototype.computeLength.call(this);
		this.size += mp4lib_Fields.FIELD_INT16.getLength() + mp4lib_Fields.FIELD_UINT16.getLength();
	}
	,write: function(data,pos) {
		mp4lib_FullBox.prototype.write.call(this,data,pos);
		this._writeData(data,mp4lib_Fields.FIELD_INT16,this.balance,{ fileName : "./src/mp4lib/SoundMediaHeaderBox.hx", lineNumber : 19, className : "mp4lib.SoundMediaHeaderBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_UINT16,this.reserved,{ fileName : "./src/mp4lib/SoundMediaHeaderBox.hx", lineNumber : 20, className : "mp4lib.SoundMediaHeaderBox", methodName : "write"});
		return this.localPos;
	}
	,read: function(data,pos,end) {
		mp4lib_FullBox.prototype.read.call(this,data,pos,end);
		this.balance = this._readData(data,mp4lib_Fields.FIELD_INT16);
		this.reserved = this._readData(data,mp4lib_Fields.FIELD_UINT16);
		return this.localPos;
	}
});
var mp4lib_DataReferenceBox = function(size) {
	mp4lib_ContainerFullBox.call(this,"dref",size,true);
};
mp4lib_DataReferenceBox.__name__ = true;
mp4lib_DataReferenceBox.__super__ = mp4lib_ContainerFullBox;
mp4lib_DataReferenceBox.prototype = $extend(mp4lib_ContainerFullBox.prototype,{
	computeLength: function() {
		mp4lib_ContainerFullBox.prototype.computeLength.call(this);
	}
	,write: function(data,pos) {
		if(this.entry_count == 0) {
			this.entry_count = this.boxes.length;
		}
		return mp4lib_ContainerFullBox.prototype.write.call(this,data,pos);
	}
});
var mp4lib_DataEntryUrlBox = function(size) {
	this.location = null;
	mp4lib_FullBox.call(this,"url ",size);
};
mp4lib_DataEntryUrlBox.__name__ = true;
mp4lib_DataEntryUrlBox.__super__ = mp4lib_FullBox;
mp4lib_DataEntryUrlBox.prototype = $extend(mp4lib_FullBox.prototype,{
	computeLength: function() {
		mp4lib_FullBox.prototype.computeLength.call(this);
		if(this.location != null) {
			this.size += mp4lib_Fields.FIELD_STRING.getLength(this.location);
		}
	}
	,read: function(data,pos,end) {
		mp4lib_FullBox.prototype.read.call(this,data,pos,end);
		if((this.flags & 1) == 0) {
			this.location = this._readData(data,mp4lib_Fields.FIELD_STRING);
		}
		return this.localPos;
	}
	,write: function(data,pos) {
		mp4lib_FullBox.prototype.write.call(this,data,pos);
		if(this.location != null) {
			this._writeData(data,mp4lib_Fields.FIELD_STRING,this.location,{ fileName : "./src/mp4lib/DataEntryUrlBox.hx", lineNumber : 29, className : "mp4lib.DataEntryUrlBox", methodName : "write"});
		}
		return this.localPos;
	}
});
var mp4lib_DataEntryUrnBox = function(size) {
	this.location = null;
	this.name = null;
	mp4lib_FullBox.call(this,"urn ",size);
};
mp4lib_DataEntryUrnBox.__name__ = true;
mp4lib_DataEntryUrnBox.__super__ = mp4lib_FullBox;
mp4lib_DataEntryUrnBox.prototype = $extend(mp4lib_FullBox.prototype,{
	computeLength: function() {
		mp4lib_FullBox.prototype.computeLength.call(this);
		if((this.flags & 1) == 0) {
			this.size += mp4lib_Fields.FIELD_STRING.getLength(this.name) + mp4lib_Fields.FIELD_STRING.getLength(this.location);
		}
	}
	,read: function(data,pos,end) {
		mp4lib_FullBox.prototype.read.call(this,data,pos,end);
		if((this.flags & 1) == 0) {
			this.name = this._readData(data,mp4lib_Fields.FIELD_STRING);
			this.location = this._readData(data,mp4lib_Fields.FIELD_STRING);
		}
		return this.localPos;
	}
	,write: function(data,pos) {
		mp4lib_FullBox.prototype.write.call(this,data,pos);
		if((this.flags & 1) == 0) {
			this._writeData(data,mp4lib_Fields.FIELD_STRING,this.name,{ fileName : "./src/mp4lib/DataEntryUrnBox.hx", lineNumber : 29, className : "mp4lib.DataEntryUrnBox", methodName : "write"});
			this._writeData(data,mp4lib_Fields.FIELD_STRING,this.location,{ fileName : "./src/mp4lib/DataEntryUrnBox.hx", lineNumber : 30, className : "mp4lib.DataEntryUrnBox", methodName : "write"});
		}
		return this.localPos;
	}
});
var mp4lib_TrackFragmentHeaderBox = function(size) {
	mp4lib_FullBox.call(this,"tfhd",size);
};
mp4lib_TrackFragmentHeaderBox.__name__ = true;
mp4lib_TrackFragmentHeaderBox.__super__ = mp4lib_FullBox;
mp4lib_TrackFragmentHeaderBox.prototype = $extend(mp4lib_FullBox.prototype,{
	computeLength: function() {
		mp4lib_FullBox.prototype.computeLength.call(this);
		this.size += mp4lib_Fields.FIELD_UINT32.getLength();
		if((this.flags & 1) != 0 && this.base_data_offset != null) {
			this.size += mp4lib_Fields.FIELD_UINT64.getLength();
		}
		if((this.flags & 2) != 0 && this.sample_description_index != null) {
			this.size += mp4lib_Fields.FIELD_UINT32.getLength();
		}
		if((this.flags & 8) != 0 && this.default_sample_duration != null) {
			this.size += mp4lib_Fields.FIELD_UINT32.getLength();
		}
		if((this.flags & 16) != 0 && this.default_sample_size != null) {
			this.size += mp4lib_Fields.FIELD_UINT32.getLength();
		}
		if((this.flags & 32) != 0 && this.default_sample_flags != null) {
			this.size += mp4lib_Fields.FIELD_UINT32.getLength();
		}
	}
	,write: function(data,pos) {
		mp4lib_FullBox.prototype.write.call(this,data,pos);
		this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.track_ID,{ fileName : "./src/mp4lib/TrackFragmentHeaderBox.hx", lineNumber : 38, className : "mp4lib.TrackFragmentHeaderBox", methodName : "write"});
		if((this.flags & 1) != 0) {
			this._writeData(data,mp4lib_Fields.FIELD_UINT64,this.base_data_offset,{ fileName : "./src/mp4lib/TrackFragmentHeaderBox.hx", lineNumber : 41, className : "mp4lib.TrackFragmentHeaderBox", methodName : "write"});
		}
		if((this.flags & 2) != 0) {
			this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.sample_description_index,{ fileName : "./src/mp4lib/TrackFragmentHeaderBox.hx", lineNumber : 44, className : "mp4lib.TrackFragmentHeaderBox", methodName : "write"});
		}
		if((this.flags & 8) != 0) {
			this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.default_sample_duration,{ fileName : "./src/mp4lib/TrackFragmentHeaderBox.hx", lineNumber : 47, className : "mp4lib.TrackFragmentHeaderBox", methodName : "write"});
		}
		if((this.flags & 16) != 0) {
			this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.default_sample_size,{ fileName : "./src/mp4lib/TrackFragmentHeaderBox.hx", lineNumber : 50, className : "mp4lib.TrackFragmentHeaderBox", methodName : "write"});
		}
		if((this.flags & 32) != 0) {
			this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.default_sample_flags,{ fileName : "./src/mp4lib/TrackFragmentHeaderBox.hx", lineNumber : 53, className : "mp4lib.TrackFragmentHeaderBox", methodName : "write"});
		}
		return this.localPos;
	}
	,read: function(data,pos,end) {
		mp4lib_FullBox.prototype.read.call(this,data,pos,end);
		this.track_ID = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		if((this.flags & 1) != 0) {
			this.base_data_offset = this._readData(data,mp4lib_Fields.FIELD_UINT64);
		}
		if((this.flags & 2) != 0) {
			this.sample_description_index = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		}
		if((this.flags & 8) != 0) {
			this.default_sample_duration = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		}
		if((this.flags & 16) != 0) {
			this.default_sample_size = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		}
		if((this.flags & 32) != 0) {
			this.default_sample_flags = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		}
		return this.localPos;
	}
});
var mp4lib_TrackFragmentBaseMediaDecodeTimeBox = function(size) {
	if(size == null) {
		size = 0;
	}
	mp4lib_FullBox.call(this,"tfdt",size);
};
mp4lib_TrackFragmentBaseMediaDecodeTimeBox.__name__ = true;
mp4lib_TrackFragmentBaseMediaDecodeTimeBox.__super__ = mp4lib_FullBox;
mp4lib_TrackFragmentBaseMediaDecodeTimeBox.prototype = $extend(mp4lib_FullBox.prototype,{
	computeLength: function() {
		mp4lib_FullBox.prototype.computeLength.call(this);
		if(this.version == 1) {
			this.size += mp4lib_Fields.FIELD_UINT64.getLength();
		} else {
			this.size += mp4lib_Fields.FIELD_UINT32.getLength();
		}
	}
	,write: function(data,pos) {
		mp4lib_FullBox.prototype.write.call(this,data,pos);
		if(this.version == 1) {
			this._writeData(data,mp4lib_Fields.FIELD_UINT64,this.baseMediaDecodeTime,{ fileName : "./src/mp4lib/TrackFragmentBaseMediaDecodeTimeBox.hx", lineNumber : 22, className : "mp4lib.TrackFragmentBaseMediaDecodeTimeBox", methodName : "write"});
		} else {
			this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.baseMediaDecodeTime,{ fileName : "./src/mp4lib/TrackFragmentBaseMediaDecodeTimeBox.hx", lineNumber : 24, className : "mp4lib.TrackFragmentBaseMediaDecodeTimeBox", methodName : "write"});
		}
		return this.localPos;
	}
	,read: function(data,pos,end) {
		mp4lib_FullBox.prototype.read.call(this,data,pos,end);
		if(this.version == 1) {
			this.baseMediaDecodeTime = this._readData(data,mp4lib_Fields.FIELD_UINT64);
		} else {
			this.baseMediaDecodeTime = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		}
		return this.localPos;
	}
});
var mp4lib_TrackFragmentRunBox = function(size) {
	this.first_sample_flags = null;
	this.data_offset = null;
	this.sample_count = null;
	mp4lib_FullBox.call(this,"trun",size);
};
mp4lib_TrackFragmentRunBox.__name__ = true;
mp4lib_TrackFragmentRunBox.__super__ = mp4lib_FullBox;
mp4lib_TrackFragmentRunBox.prototype = $extend(mp4lib_FullBox.prototype,{
	computeLength: function() {
		mp4lib_FullBox.prototype.computeLength.call(this);
		this.size += mp4lib_Fields.FIELD_UINT32.getLength();
		if((this.flags & 1) != 0 && this.data_offset != null) {
			this.size += mp4lib_Fields.FIELD_INT32.getLength();
		}
		if((this.flags & 4) != 0 && this.first_sample_flags != null) {
			this.size += mp4lib_Fields.FIELD_UINT32.getLength();
		}
		var _g = 0;
		var _g1 = this.sample_count;
		while(_g < _g1) {
			var i = _g++;
			if((this.flags & 256) != 0 && this.samples_table[i].sample_duration != null) {
				this.size += mp4lib_Fields.FIELD_UINT32.getLength();
			}
			if((this.flags & 512) != 0 && this.samples_table[i].sample_size != null) {
				this.size += mp4lib_Fields.FIELD_UINT32.getLength();
			}
			if((this.flags & 1024) != 0 && this.samples_table[i].sample_flags != null) {
				this.size += mp4lib_Fields.FIELD_UINT32.getLength();
			}
			if(this.version == 1) {
				if((this.flags & 2048) != 0 && this.samples_table[i].sample_composition_time_offset != null) {
					this.size += mp4lib_Fields.FIELD_INT32.getLength();
				}
			} else if((this.flags & 2048) != 0 && this.samples_table[i].sample_composition_time_offset != null) {
				this.size += mp4lib_Fields.FIELD_UINT32.getLength();
			}
		}
	}
	,write: function(data,pos) {
		mp4lib_FullBox.prototype.write.call(this,data,pos);
		this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.sample_count,{ fileName : "./src/mp4lib/TrackFragmentRunBox.hx", lineNumber : 57, className : "mp4lib.TrackFragmentRunBox", methodName : "write"});
		if((this.flags & 1) != 0) {
			this._writeData(data,mp4lib_Fields.FIELD_INT32,this.data_offset,{ fileName : "./src/mp4lib/TrackFragmentRunBox.hx", lineNumber : 60, className : "mp4lib.TrackFragmentRunBox", methodName : "write"});
		}
		if((this.flags & 4) != 0) {
			this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.first_sample_flags,{ fileName : "./src/mp4lib/TrackFragmentRunBox.hx", lineNumber : 63, className : "mp4lib.TrackFragmentRunBox", methodName : "write"});
		}
		var _g = 0;
		var _g1 = this.sample_count;
		while(_g < _g1) {
			var i = _g++;
			if((this.flags & 256) != 0) {
				this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.samples_table[i].sample_duration,{ fileName : "./src/mp4lib/TrackFragmentRunBox.hx", lineNumber : 69, className : "mp4lib.TrackFragmentRunBox", methodName : "write"});
			}
			if((this.flags & 512) != 0) {
				this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.samples_table[i].sample_size,{ fileName : "./src/mp4lib/TrackFragmentRunBox.hx", lineNumber : 72, className : "mp4lib.TrackFragmentRunBox", methodName : "write"});
			}
			if((this.flags & 1024) != 0) {
				this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.samples_table[i].sample_flags,{ fileName : "./src/mp4lib/TrackFragmentRunBox.hx", lineNumber : 75, className : "mp4lib.TrackFragmentRunBox", methodName : "write"});
			}
			if(this.version == 1) {
				if((this.flags & 2048) != 0) {
					this._writeData(data,mp4lib_Fields.FIELD_INT32,this.samples_table[i].sample_composition_time_offset,{ fileName : "./src/mp4lib/TrackFragmentRunBox.hx", lineNumber : 80, className : "mp4lib.TrackFragmentRunBox", methodName : "write"});
				}
			} else if((this.flags & 2048) != 0) {
				this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.samples_table[i].sample_composition_time_offset,{ fileName : "./src/mp4lib/TrackFragmentRunBox.hx", lineNumber : 84, className : "mp4lib.TrackFragmentRunBox", methodName : "write"});
			}
		}
		return this.localPos;
	}
	,read: function(data,pos,end) {
		mp4lib_FullBox.prototype.read.call(this,data,pos,end);
		this.sample_count = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		if((this.flags & 1) != 0) {
			this.data_offset = this._readData(data,mp4lib_Fields.FIELD_INT32);
		}
		if((this.flags & 4) != 0) {
			this.first_sample_flags = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		}
		this.samples_table = [];
		var _g = 0;
		var _g1 = this.sample_count;
		while(_g < _g1) {
			var i = _g++;
			var struct = { sample_duration : null, sample_size : null, sample_flags : null, sample_composition_time_offset : null};
			if((this.flags & 256) != 0) {
				struct.sample_duration = this._readData(data,mp4lib_Fields.FIELD_UINT32);
			}
			if((this.flags & 512) != 0) {
				struct.sample_size = this._readData(data,mp4lib_Fields.FIELD_UINT32);
			}
			if((this.flags & 1024) != 0) {
				struct.sample_flags = this._readData(data,mp4lib_Fields.FIELD_UINT32);
			}
			if(this.version == 1) {
				if((this.flags & 2048) != 0) {
					struct.sample_composition_time_offset = this._readData(data,mp4lib_Fields.FIELD_INT32);
				}
			} else if((this.flags & 2048) != 0) {
				struct.sample_composition_time_offset = this._readData(data,mp4lib_Fields.FIELD_UINT32);
			}
			this.samples_table.push(struct);
		}
		return this.localPos;
	}
});
var mp4lib_SampleDescriptionBox = function(size) {
	mp4lib_ContainerFullBox.call(this,"stsd",size,true);
};
mp4lib_SampleDescriptionBox.__name__ = true;
mp4lib_SampleDescriptionBox.__super__ = mp4lib_ContainerFullBox;
mp4lib_SampleDescriptionBox.prototype = $extend(mp4lib_ContainerFullBox.prototype,{
	write: function(data,pos) {
		this.entry_count = this.boxes.length;
		return mp4lib_ContainerFullBox.prototype.write.call(this,data,pos);
	}
});
var mp4lib_SampleDependencyTableBox = function(size) {
	if(size == null) {
		size = 0;
	}
	mp4lib_FullBox.call(this,"sdtp",size);
};
mp4lib_SampleDependencyTableBox.__name__ = true;
mp4lib_SampleDependencyTableBox.__super__ = mp4lib_FullBox;
mp4lib_SampleDependencyTableBox.prototype = $extend(mp4lib_FullBox.prototype,{
	computeLength: function() {
		mp4lib_FullBox.prototype.computeLength.call(this);
		this.size += mp4lib_Fields.FIELD_UINT8.getLength() * this.sample_dependency_table.length;
	}
	,write: function(data,pos) {
		mp4lib_FullBox.prototype.write.call(this,data,pos);
		this._writeArrayData(data,mp4lib_Fields.FIELD_UINT8,this.sample_dependency_table);
		return this.localPos;
	}
	,read: function(data,pos,end) {
		mp4lib_FullBox.prototype.read.call(this,data,pos,end);
		this.sample_dependency_table = this._readArrayData(data,mp4lib_Fields.FIELD_UINT8);
		return this.localPos;
	}
});
var mp4lib_SampleEntryBox = function(boxType,size) {
	mp4lib_Box.call(this,boxType,size);
};
mp4lib_SampleEntryBox.__name__ = true;
mp4lib_SampleEntryBox.__super__ = mp4lib_Box;
mp4lib_SampleEntryBox.prototype = $extend(mp4lib_Box.prototype,{
	computeLength: function() {
		mp4lib_Box.prototype.computeLength.call(this);
		this.size += mp4lib_Fields.FIELD_UINT16.getLength() + mp4lib_Fields.FIELD_UINT8.getLength() * 6;
	}
	,write: function(data,pos) {
		mp4lib_Box.prototype.write.call(this,data,pos);
		this._writeArrayData(data,mp4lib_Fields.FIELD_UINT8,this.reserved);
		this._writeData(data,mp4lib_Fields.FIELD_UINT16,this.data_reference_index,{ fileName : "./src/mp4lib/SampleEntryBox.hx", lineNumber : 16, className : "mp4lib.SampleEntryBox", methodName : "write"});
		return this.localPos;
	}
	,read: function(data,pos,end) {
		this.localPos = pos;
		this.localEnd = end;
		this.reserved = this._readArrayFieldData(data,mp4lib_Fields.FIELD_UINT8,6);
		this.data_reference_index = this._readData(data,mp4lib_Fields.FIELD_UINT16);
		return this.localPos;
	}
});
var mp4lib_VisualSampleEntryBox = function(boxType,size) {
	this.height = null;
	this.width = null;
	this.reserved_2 = null;
	this.pre_defined = null;
	mp4lib_SampleEntryBox.call(this,boxType,size);
};
mp4lib_VisualSampleEntryBox.__name__ = true;
mp4lib_VisualSampleEntryBox.__super__ = mp4lib_SampleEntryBox;
mp4lib_VisualSampleEntryBox.prototype = $extend(mp4lib_SampleEntryBox.prototype,{
	computeLength: function() {
		mp4lib_SampleEntryBox.prototype.computeLength.call(this);
		this.size += mp4lib_Fields.FIELD_UINT16.getLength() * 7 + mp4lib_Fields.FIELD_UINT32.getLength() * 3;
		this.size += mp4lib_Fields.FIELD_UINT32.getLength() * 3;
		this.size += 32;
	}
	,write: function(data,pos) {
		mp4lib_SampleEntryBox.prototype.write.call(this,data,pos);
		this._writeData(data,mp4lib_Fields.FIELD_UINT16,this.pre_defined,{ fileName : "./src/mp4lib/VisualSampleEntryBox.hx", lineNumber : 30, className : "mp4lib.VisualSampleEntryBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_UINT16,this.reserved_2,{ fileName : "./src/mp4lib/VisualSampleEntryBox.hx", lineNumber : 31, className : "mp4lib.VisualSampleEntryBox", methodName : "write"});
		this._writeArrayData(data,mp4lib_Fields.FIELD_UINT32,this.pre_defined_2);
		this._writeData(data,mp4lib_Fields.FIELD_UINT16,this.width,{ fileName : "./src/mp4lib/VisualSampleEntryBox.hx", lineNumber : 34, className : "mp4lib.VisualSampleEntryBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_UINT16,this.height,{ fileName : "./src/mp4lib/VisualSampleEntryBox.hx", lineNumber : 35, className : "mp4lib.VisualSampleEntryBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.horizresolution,{ fileName : "./src/mp4lib/VisualSampleEntryBox.hx", lineNumber : 36, className : "mp4lib.VisualSampleEntryBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.vertresolution,{ fileName : "./src/mp4lib/VisualSampleEntryBox.hx", lineNumber : 37, className : "mp4lib.VisualSampleEntryBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.reserved_3,{ fileName : "./src/mp4lib/VisualSampleEntryBox.hx", lineNumber : 38, className : "mp4lib.VisualSampleEntryBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_UINT16,this.frame_count,{ fileName : "./src/mp4lib/VisualSampleEntryBox.hx", lineNumber : 39, className : "mp4lib.VisualSampleEntryBox", methodName : "write"});
		var _g = 0;
		while(_g < 32) {
			var i = _g++;
			data[this.localPos + i] = HxOverrides.cca(this.compressorname,i) & 255;
		}
		this.localPos += 32;
		this._writeData(data,mp4lib_Fields.FIELD_UINT16,this.depth,{ fileName : "./src/mp4lib/VisualSampleEntryBox.hx", lineNumber : 44, className : "mp4lib.VisualSampleEntryBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_INT16,this.pre_defined_3,{ fileName : "./src/mp4lib/VisualSampleEntryBox.hx", lineNumber : 45, className : "mp4lib.VisualSampleEntryBox", methodName : "write"});
		return this.localPos;
	}
	,read: function(data,pos,end) {
		mp4lib_SampleEntryBox.prototype.read.call(this,data,pos,end);
		this.pre_defined = this._readData(data,mp4lib_Fields.FIELD_UINT16);
		this.reserved_2 = this._readData(data,mp4lib_Fields.FIELD_UINT16);
		this.pre_defined_2 = this._readArrayFieldData(data,mp4lib_Fields.FIELD_UINT32,3);
		this.width = this._readData(data,mp4lib_Fields.FIELD_UINT16);
		this.height = this._readData(data,mp4lib_Fields.FIELD_UINT16);
		this.horizresolution = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		this.vertresolution = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		this.reserved_3 = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		this.frame_count = this._readData(data,mp4lib_Fields.FIELD_UINT16);
		var flsf = new mp4lib_fields_FixedLenStringField(32);
		this.compressorname = flsf.read(data,this.localPos);
		this.localPos += 32;
		this.depth = this._readData(data,mp4lib_Fields.FIELD_UINT16);
		this.pre_defined_3 = this._readData(data,mp4lib_Fields.FIELD_INT16);
		return this.localPos;
	}
});
var mp4lib_VisualSampleEntryContainerBox = function(boxType,size) {
	mp4lib_VisualSampleEntryBox.call(this,boxType,size);
	this.boxes = [];
};
mp4lib_VisualSampleEntryContainerBox.__name__ = true;
mp4lib_VisualSampleEntryContainerBox.__super__ = mp4lib_VisualSampleEntryBox;
mp4lib_VisualSampleEntryContainerBox.prototype = $extend(mp4lib_VisualSampleEntryBox.prototype,{
	computeLength: function() {
		mp4lib_VisualSampleEntryBox.prototype.computeLength.call(this);
		var _g = 0;
		var _g1 = this.boxes;
		while(_g < _g1.length) {
			var box = _g1[_g];
			++_g;
			box.computeLength();
			this.size += box.size;
		}
	}
	,write: function(data,pos) {
		mp4lib_VisualSampleEntryBox.prototype.write.call(this,data,pos);
		var _g = 0;
		var _g1 = this.boxes;
		while(_g < _g1.length) {
			var box = _g1[_g];
			++_g;
			this.localPos = box.write(data,this.localPos);
		}
		return this.localPos;
	}
	,read: function(data,pos,end) {
		mp4lib_VisualSampleEntryBox.prototype.read.call(this,data,pos,end);
		var size = 0;
		var uuidFieldPos = 0;
		var uuid = null;
		var boxtype;
		var box;
		while(this.localPos < this.localEnd) {
			size = mp4lib_Fields.FIELD_UINT32.read(data,this.localPos);
			boxtype = mp4lib_Fields.readString(data,this.localPos + 4,4);
			if(boxtype == "uuid") {
				uuidFieldPos = size == 1 ? 16 : 8;
				uuid = new mp4lib_fields_ArrayField(mp4lib_Fields.FIELD_INT8,16).read(data,this.localPos + uuidFieldPos,this.localPos + uuidFieldPos + 16);
				uuid = JSON.stringify(uuid);
			}
			box = Mp4lib.createBox(boxtype,size,uuid);
			if(boxtype == "uuid") {
				this.localPos = box.read(data,this.localPos + mp4lib_Fields.FIELD_INT8.getLength() * 16 + 8,this.localPos + size);
			} else {
				this.localPos = box.read(data,this.localPos + 8,this.localPos + size);
			}
			this.boxes.push(box);
			if(box.size <= 0 || box.size == null) {
				throw new js__$Boot_HaxeError("Problem on size of box " + box.boxtype + ", parsing stopped to avoid infinite loop");
			}
			if(box.boxtype == null) {
				throw new js__$Boot_HaxeError("Problem on unknown box, parsing stopped to avoid infinite loop");
			}
		}
		return this.localPos;
	}
});
var mp4lib_AVC1VisualSampleEntryBox = function(size) {
	mp4lib_VisualSampleEntryContainerBox.call(this,"avc1",size);
};
mp4lib_AVC1VisualSampleEntryBox.__name__ = true;
mp4lib_AVC1VisualSampleEntryBox.__super__ = mp4lib_VisualSampleEntryContainerBox;
mp4lib_AVC1VisualSampleEntryBox.prototype = $extend(mp4lib_VisualSampleEntryContainerBox.prototype,{
});
var mp4lib_EncryptedVideoBox = function(size) {
	mp4lib_VisualSampleEntryContainerBox.call(this,"encv",size);
};
mp4lib_EncryptedVideoBox.__name__ = true;
mp4lib_EncryptedVideoBox.__super__ = mp4lib_VisualSampleEntryContainerBox;
mp4lib_EncryptedVideoBox.prototype = $extend(mp4lib_VisualSampleEntryContainerBox.prototype,{
});
var mp4lib_AVCConfigurationBox = function(size) {
	this.numOfSequenceParameterSets_tmp = null;
	this.temp = null;
	this.lengthSizeMinusOne = null;
	this.configurationVersion = null;
	this.profile_compatibility = null;
	this.AVCProfileIndication = null;
	this.AVCLevelIndication = null;
	this.numOfPictureParameterSets = null;
	this.numOfSequenceParameterSets = null;
	this.PPS_NAL = null;
	this.SPS_NAL = null;
	mp4lib_Box.call(this,"avcC",size);
};
mp4lib_AVCConfigurationBox.__name__ = true;
mp4lib_AVCConfigurationBox.__super__ = mp4lib_Box;
mp4lib_AVCConfigurationBox.prototype = $extend(mp4lib_Box.prototype,{
	computeLength: function() {
		mp4lib_Box.prototype.computeLength.call(this);
		this.size += mp4lib_Fields.FIELD_UINT8.getLength() * 4 + mp4lib_Fields.FIELD_UINT8.getLength() * 3;
		this.size += this._getNALLength(this.numOfSequenceParameterSets,this.SPS_NAL);
		this.size += this._getNALLength(this.numOfPictureParameterSets,this.PPS_NAL);
	}
	,write: function(data,pos) {
		mp4lib_Box.prototype.write.call(this,data,pos);
		this._writeData(data,mp4lib_Fields.FIELD_UINT8,this.configurationVersion,{ fileName : "./src/mp4lib/AVCConfigurationBox.hx", lineNumber : 40, className : "mp4lib.AVCConfigurationBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_UINT8,this.AVCProfileIndication,{ fileName : "./src/mp4lib/AVCConfigurationBox.hx", lineNumber : 41, className : "mp4lib.AVCConfigurationBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_UINT8,this.profile_compatibility,{ fileName : "./src/mp4lib/AVCConfigurationBox.hx", lineNumber : 42, className : "mp4lib.AVCConfigurationBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_UINT8,this.AVCLevelIndication,{ fileName : "./src/mp4lib/AVCConfigurationBox.hx", lineNumber : 43, className : "mp4lib.AVCConfigurationBox", methodName : "write"});
		this.temp = this.lengthSizeMinusOne | 252;
		this._writeData(data,mp4lib_Fields.FIELD_UINT8,this.temp,{ fileName : "./src/mp4lib/AVCConfigurationBox.hx", lineNumber : 46, className : "mp4lib.AVCConfigurationBox", methodName : "write"});
		this.numOfSequenceParameterSets = this.SPS_NAL.length;
		this.numOfSequenceParameterSets_tmp = this.numOfSequenceParameterSets | 224;
		this._writeData(data,mp4lib_Fields.FIELD_UINT8,this.numOfSequenceParameterSets_tmp,{ fileName : "./src/mp4lib/AVCConfigurationBox.hx", lineNumber : 49, className : "mp4lib.AVCConfigurationBox", methodName : "write"});
		this._writeNAL(data,this.numOfSequenceParameterSets,this.SPS_NAL);
		this._writeData(data,mp4lib_Fields.FIELD_UINT8,this.numOfPictureParameterSets,{ fileName : "./src/mp4lib/AVCConfigurationBox.hx", lineNumber : 51, className : "mp4lib.AVCConfigurationBox", methodName : "write"});
		this._writeNAL(data,this.numOfPictureParameterSets,this.PPS_NAL);
		return this.localPos;
	}
	,read: function(data,pos,end) {
		this.localPos = pos;
		this.localEnd = end;
		this.configurationVersion = this._readData(data,mp4lib_Fields.FIELD_UINT8);
		this.AVCProfileIndication = this._readData(data,mp4lib_Fields.FIELD_UINT8);
		this.profile_compatibility = this._readData(data,mp4lib_Fields.FIELD_UINT8);
		this.AVCLevelIndication = this._readData(data,mp4lib_Fields.FIELD_UINT8);
		this.temp = this._readData(data,mp4lib_Fields.FIELD_UINT8);
		this.lengthSizeMinusOne = this.temp & 3;
		this.numOfSequenceParameterSets_tmp = this._readData(data,mp4lib_Fields.FIELD_UINT8);
		this.numOfSequenceParameterSets = this.numOfSequenceParameterSets_tmp & 31;
		this.SPS_NAL = this._readNAL(data,this.numOfSequenceParameterSets);
		this.numOfPictureParameterSets = this._readData(data,mp4lib_Fields.FIELD_UINT8);
		this.PPS_NAL = this._readNAL(data,this.numOfPictureParameterSets);
		return this.localPos;
	}
	,_getNALLength: function(nbElements,nalArray) {
		var size_NAL = 0;
		var _g = 0;
		var _g1 = nbElements;
		while(_g < _g1) {
			var i = _g++;
			size_NAL += mp4lib_Fields.FIELD_UINT16.getLength() + nalArray[i].NAL_length;
		}
		return size_NAL;
	}
	,_readNAL: function(data,nbElements) {
		var nalArray = [];
		var struct = null;
		var _g = 0;
		var _g1 = nbElements;
		while(_g < _g1) {
			var i = _g++;
			struct = { NAL_length : null, NAL : null};
			struct.NAL_length = this._readData(data,mp4lib_Fields.FIELD_UINT16);
			var begin = this.localPos;
			var length = this.localPos + struct.NAL_length;
			struct.NAL = haxe_io__$UInt8Array_UInt8Array_$Impl_$.fromBytes(haxe_io_Bytes.ofData(new Uint8Array(data.buffer.slice(begin,length == null ? null : begin + length)).buffer));
			this.localPos += struct.NAL_length;
			nalArray.push(struct);
		}
		return nalArray;
	}
	,_writeNAL: function(data,nbElements,nalArray) {
		var _g = 0;
		var _g1 = nbElements;
		while(_g < _g1) {
			var i = _g++;
			this._writeData(data,mp4lib_Fields.FIELD_UINT16,nalArray[i].NAL_length,{ fileName : "./src/mp4lib/AVCConfigurationBox.hx", lineNumber : 109, className : "mp4lib.AVCConfigurationBox", methodName : "_writeNAL"});
			this._writeBuffer(data,nalArray[i].NAL,nalArray[i].NAL_length);
		}
	}
});
var mp4lib_PixelAspectRatioBox = function(size) {
	mp4lib_Box.call(this,"pasp",size);
};
mp4lib_PixelAspectRatioBox.__name__ = true;
mp4lib_PixelAspectRatioBox.__super__ = mp4lib_Box;
mp4lib_PixelAspectRatioBox.prototype = $extend(mp4lib_Box.prototype,{
	computeLength: function() {
		mp4lib_Box.prototype.computeLength.call(this);
		this.size += mp4lib_Fields.FIELD_INT32.getLength() * 2;
	}
	,read: function(data,pos,end) {
		this.localPos = pos;
		this.localEnd = end;
		this.hSpacing = this._readData(data,mp4lib_Fields.FIELD_INT32);
		this.vSpacing = this._readData(data,mp4lib_Fields.FIELD_INT32);
		return this.localPos;
	}
	,write: function(data,pos) {
		mp4lib_Box.prototype.write.call(this,data,pos);
		this._writeData(data,mp4lib_Fields.FIELD_INT32,this.hSpacing,{ fileName : "./src/mp4lib/PixelAspectRatioBox.hx", lineNumber : 27, className : "mp4lib.PixelAspectRatioBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_INT32,this.vSpacing,{ fileName : "./src/mp4lib/PixelAspectRatioBox.hx", lineNumber : 28, className : "mp4lib.PixelAspectRatioBox", methodName : "write"});
		return this.localPos;
	}
});
var mp4lib_AudioSampleEntryBox = function(boxType,size) {
	mp4lib_SampleEntryBox.call(this,boxType,size);
};
mp4lib_AudioSampleEntryBox.__name__ = true;
mp4lib_AudioSampleEntryBox.__super__ = mp4lib_SampleEntryBox;
mp4lib_AudioSampleEntryBox.prototype = $extend(mp4lib_SampleEntryBox.prototype,{
	computeLength: function() {
		mp4lib_SampleEntryBox.prototype.computeLength.call(this);
		this.size += mp4lib_Fields.FIELD_UINT16.getLength() * 4 + mp4lib_Fields.FIELD_UINT32.getLength() * 3;
	}
	,write: function(data,pos) {
		mp4lib_SampleEntryBox.prototype.write.call(this,data,pos);
		this._writeArrayData(data,mp4lib_Fields.FIELD_UINT32,this.reserved_2);
		this._writeData(data,mp4lib_Fields.FIELD_UINT16,this.channelcount,{ fileName : "./src/mp4lib/AudioSampleEntryBox.hx", lineNumber : 21, className : "mp4lib.AudioSampleEntryBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_UINT16,this.samplesize,{ fileName : "./src/mp4lib/AudioSampleEntryBox.hx", lineNumber : 22, className : "mp4lib.AudioSampleEntryBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_UINT16,this.pre_defined,{ fileName : "./src/mp4lib/AudioSampleEntryBox.hx", lineNumber : 23, className : "mp4lib.AudioSampleEntryBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_UINT16,this.reserved_3,{ fileName : "./src/mp4lib/AudioSampleEntryBox.hx", lineNumber : 24, className : "mp4lib.AudioSampleEntryBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.samplerate,{ fileName : "./src/mp4lib/AudioSampleEntryBox.hx", lineNumber : 25, className : "mp4lib.AudioSampleEntryBox", methodName : "write"});
		return this.localPos;
	}
	,read: function(data,pos,end) {
		mp4lib_SampleEntryBox.prototype.read.call(this,data,pos,end);
		this.reserved_2 = this._readArrayFieldData(data,mp4lib_Fields.FIELD_UINT32,2);
		this.channelcount = this._readData(data,mp4lib_Fields.FIELD_UINT16);
		this.samplesize = this._readData(data,mp4lib_Fields.FIELD_UINT16);
		this.pre_defined = this._readData(data,mp4lib_Fields.FIELD_UINT16);
		this.reserved_3 = this._readData(data,mp4lib_Fields.FIELD_UINT16);
		this.samplerate = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		return this.localPos;
	}
});
var mp4lib_AudioSampleEntryContainerBox = function(boxType,size) {
	this.boxes = null;
	mp4lib_AudioSampleEntryBox.call(this,boxType,size);
	this.boxes = [];
};
mp4lib_AudioSampleEntryContainerBox.__name__ = true;
mp4lib_AudioSampleEntryContainerBox.__super__ = mp4lib_AudioSampleEntryBox;
mp4lib_AudioSampleEntryContainerBox.prototype = $extend(mp4lib_AudioSampleEntryBox.prototype,{
	computeLength: function() {
		mp4lib_AudioSampleEntryBox.prototype.computeLength.call(this);
		var _g = 0;
		var _g1 = this.boxes;
		while(_g < _g1.length) {
			var box = _g1[_g];
			++_g;
			box.computeLength();
			this.size += box.size;
		}
	}
	,write: function(data,pos) {
		mp4lib_AudioSampleEntryBox.prototype.write.call(this,data,pos);
		var _g = 0;
		var _g1 = this.boxes;
		while(_g < _g1.length) {
			var box = _g1[_g];
			++_g;
			this.localPos = box.write(data,this.localPos);
		}
		return this.localPos;
	}
	,read: function(data,pos,end) {
		mp4lib_AudioSampleEntryBox.prototype.read.call(this,data,pos,end);
		var size = 0;
		var uuidFieldPos = 0;
		var uuid = null;
		var boxtype;
		var box;
		while(this.localPos < this.localEnd) {
			size = mp4lib_Fields.FIELD_UINT32.read(data,this.localPos);
			boxtype = mp4lib_Fields.readString(data,this.localPos + 4,4);
			if(boxtype == "uuid") {
				uuidFieldPos = size == 1 ? 16 : 8;
				uuid = new mp4lib_fields_ArrayField(mp4lib_Fields.FIELD_INT8,16).read(data,this.localPos + uuidFieldPos,this.localPos + uuidFieldPos + 16);
				uuid = JSON.stringify(uuid);
			}
			box = Mp4lib.createBox(boxtype,size,uuid);
			if(boxtype == "uuid") {
				this.localPos = box.read(data,this.localPos + mp4lib_Fields.FIELD_INT8.getLength() * 16 + 8,this.localPos + size);
			} else {
				this.localPos = box.read(data,this.localPos + 8,this.localPos + size);
			}
			this.boxes.push(box);
			if(box.size <= 0 || box.size == null) {
				throw new js__$Boot_HaxeError("Problem on size of box " + box.boxtype + ", parsing stopped to avoid infinite loop");
			}
			if(box.boxtype == null) {
				throw new js__$Boot_HaxeError("Problem on unknown box, parsing stopped to avoid infinite loop");
			}
		}
		return this.localPos;
	}
});
var mp4lib_MP4AudioSampleEntryBox = function(size) {
	mp4lib_AudioSampleEntryContainerBox.call(this,"mp4a",size);
};
mp4lib_MP4AudioSampleEntryBox.__name__ = true;
mp4lib_MP4AudioSampleEntryBox.__super__ = mp4lib_AudioSampleEntryContainerBox;
mp4lib_MP4AudioSampleEntryBox.prototype = $extend(mp4lib_AudioSampleEntryContainerBox.prototype,{
});
var mp4lib_EncryptedAudioBox = function(size) {
	mp4lib_AudioSampleEntryContainerBox.call(this,"enca",size);
};
mp4lib_EncryptedAudioBox.__name__ = true;
mp4lib_EncryptedAudioBox.__super__ = mp4lib_AudioSampleEntryContainerBox;
mp4lib_EncryptedAudioBox.prototype = $extend(mp4lib_AudioSampleEntryContainerBox.prototype,{
});
var mp4lib_ESDBox = function(size) {
	this.ES_data = null;
	this.ES_length = null;
	this.ES_tag = null;
	mp4lib_FullBox.call(this,"esds",size);
};
mp4lib_ESDBox.__name__ = true;
mp4lib_ESDBox.__super__ = mp4lib_FullBox;
mp4lib_ESDBox.prototype = $extend(mp4lib_FullBox.prototype,{
	computeLength: function() {
		mp4lib_FullBox.prototype.computeLength.call(this);
		this.size += mp4lib_Fields.FIELD_UINT8.getLength() * 2 + this.ES_length;
	}
	,write: function(data,pos) {
		mp4lib_FullBox.prototype.write.call(this,data,pos);
		this._writeData(data,mp4lib_Fields.FIELD_UINT8,this.ES_tag,{ fileName : "./src/mp4lib/ESDBox.hx", lineNumber : 19, className : "mp4lib.ESDBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_UINT8,this.ES_length,{ fileName : "./src/mp4lib/ESDBox.hx", lineNumber : 20, className : "mp4lib.ESDBox", methodName : "write"});
		this._writeBuffer(data,this.ES_data,this.ES_length);
		return this.localPos;
	}
	,read: function(data,pos,end) {
		mp4lib_FullBox.prototype.read.call(this,data,pos,end);
		this.ES_tag = this._readData(data,mp4lib_Fields.FIELD_UINT8);
		this.ES_length = this._readData(data,mp4lib_Fields.FIELD_UINT8);
		var begin = this.localPos;
		var length = this.localPos + this.ES_length;
		this.ES_data = haxe_io__$UInt8Array_UInt8Array_$Impl_$.fromBytes(haxe_io_Bytes.ofData(new Uint8Array(data.buffer.slice(begin,length == null ? null : begin + length)).buffer));
		this.localPos += this.ES_length;
		return this.localPos;
	}
});
var mp4lib_SampleSizeBox = function(size) {
	this.entries = null;
	this.sample_count = null;
	this.sample_size = null;
	mp4lib_FullBox.call(this,"stsz",size);
};
mp4lib_SampleSizeBox.__name__ = true;
mp4lib_SampleSizeBox.__super__ = mp4lib_FullBox;
mp4lib_SampleSizeBox.prototype = $extend(mp4lib_FullBox.prototype,{
	computeLength: function() {
		mp4lib_FullBox.prototype.computeLength.call(this);
		var a = this.size;
		var a1 = mp4lib_Fields.FIELD_UINT32.getLength() * 2;
		var a2 = mp4lib_Fields.FIELD_UINT32.getLength();
		this.size = a + (a1 + haxe__$Int32_Int32_$Impl_$._mul(a2,this.sample_count) | 0) | 0;
	}
	,write: function(data,pos) {
		mp4lib_FullBox.prototype.write.call(this,data,pos);
		this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.sample_size,{ fileName : "./src/mp4lib/SampleSizeBox.hx", lineNumber : 18, className : "mp4lib.SampleSizeBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.sample_count,{ fileName : "./src/mp4lib/SampleSizeBox.hx", lineNumber : 19, className : "mp4lib.SampleSizeBox", methodName : "write"});
		var _g = 0;
		var _g1 = this.sample_count;
		while(_g < _g1) {
			var i = _g++;
			this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.entries[i],{ fileName : "./src/mp4lib/SampleSizeBox.hx", lineNumber : 21, className : "mp4lib.SampleSizeBox", methodName : "write"});
		}
		return this.localPos;
	}
	,read: function(data,pos,end) {
		mp4lib_FullBox.prototype.read.call(this,data,pos,end);
		this.sample_size = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		this.sample_count = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		this.entries = this._readArrayFieldData(data,mp4lib_Fields.FIELD_UINT32,this.sample_count);
		return this.localPos;
	}
});
var mp4lib_ProtectionSystemSpecificHeaderBox = function(size) {
	this.KIDS = [];
	mp4lib_FullBox.call(this,"pssh",size);
};
mp4lib_ProtectionSystemSpecificHeaderBox.__name__ = true;
mp4lib_ProtectionSystemSpecificHeaderBox.__super__ = mp4lib_FullBox;
mp4lib_ProtectionSystemSpecificHeaderBox.prototype = $extend(mp4lib_FullBox.prototype,{
	computeLength: function() {
		mp4lib_FullBox.prototype.computeLength.call(this);
		this.size += mp4lib_Fields.FIELD_UINT8.getLength() * 16;
		if(this.version == 1) {
			this.size += mp4lib_Fields.FIELD_UINT32.getLength();
			this.size += mp4lib_Fields.FIELD_UINT8.getLength() * this.KID_count * 16;
		}
		var a = this.size += mp4lib_Fields.FIELD_UINT32.getLength();
		var a1 = mp4lib_Fields.FIELD_UINT8.getLength();
		this.size = a + haxe__$Int32_Int32_$Impl_$._mul(a1,this.DataSize) | 0;
	}
	,read: function(data,pos,end) {
		mp4lib_FullBox.prototype.read.call(this,data,pos,end);
		this.SystemID = this._readArrayFieldData(data,mp4lib_Fields.FIELD_UINT8,16);
		if(this.version == 1) {
			this.KID_count = this._readData(data,mp4lib_Fields.FIELD_UINT32);
			var _g = 0;
			var _g1 = this.KID_count;
			while(_g < _g1) {
				var i = _g++;
				this.KIDS[i] = this._readArrayFieldData(data,mp4lib_Fields.FIELD_UINT8,16);
			}
		}
		this.DataSize = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		this.Data = this._readArrayFieldData(data,mp4lib_Fields.FIELD_UINT8,this.DataSize);
		return this.localPos;
	}
	,write: function(data,pos) {
		mp4lib_FullBox.prototype.write.call(this,data,pos);
		this._writeData(data,mp4lib_Fields.FIELD_UINT8,this.SystemID[0],{ fileName : "./src/mp4lib/ProtectionSystemSpecificHeaderBox.hx", lineNumber : 43, className : "mp4lib.ProtectionSystemSpecificHeaderBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_UINT8,this.SystemID[1],{ fileName : "./src/mp4lib/ProtectionSystemSpecificHeaderBox.hx", lineNumber : 43, className : "mp4lib.ProtectionSystemSpecificHeaderBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_UINT8,this.SystemID[2],{ fileName : "./src/mp4lib/ProtectionSystemSpecificHeaderBox.hx", lineNumber : 43, className : "mp4lib.ProtectionSystemSpecificHeaderBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_UINT8,this.SystemID[3],{ fileName : "./src/mp4lib/ProtectionSystemSpecificHeaderBox.hx", lineNumber : 43, className : "mp4lib.ProtectionSystemSpecificHeaderBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_UINT8,this.SystemID[4],{ fileName : "./src/mp4lib/ProtectionSystemSpecificHeaderBox.hx", lineNumber : 43, className : "mp4lib.ProtectionSystemSpecificHeaderBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_UINT8,this.SystemID[5],{ fileName : "./src/mp4lib/ProtectionSystemSpecificHeaderBox.hx", lineNumber : 43, className : "mp4lib.ProtectionSystemSpecificHeaderBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_UINT8,this.SystemID[6],{ fileName : "./src/mp4lib/ProtectionSystemSpecificHeaderBox.hx", lineNumber : 43, className : "mp4lib.ProtectionSystemSpecificHeaderBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_UINT8,this.SystemID[7],{ fileName : "./src/mp4lib/ProtectionSystemSpecificHeaderBox.hx", lineNumber : 43, className : "mp4lib.ProtectionSystemSpecificHeaderBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_UINT8,this.SystemID[8],{ fileName : "./src/mp4lib/ProtectionSystemSpecificHeaderBox.hx", lineNumber : 43, className : "mp4lib.ProtectionSystemSpecificHeaderBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_UINT8,this.SystemID[9],{ fileName : "./src/mp4lib/ProtectionSystemSpecificHeaderBox.hx", lineNumber : 43, className : "mp4lib.ProtectionSystemSpecificHeaderBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_UINT8,this.SystemID[10],{ fileName : "./src/mp4lib/ProtectionSystemSpecificHeaderBox.hx", lineNumber : 43, className : "mp4lib.ProtectionSystemSpecificHeaderBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_UINT8,this.SystemID[11],{ fileName : "./src/mp4lib/ProtectionSystemSpecificHeaderBox.hx", lineNumber : 43, className : "mp4lib.ProtectionSystemSpecificHeaderBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_UINT8,this.SystemID[12],{ fileName : "./src/mp4lib/ProtectionSystemSpecificHeaderBox.hx", lineNumber : 43, className : "mp4lib.ProtectionSystemSpecificHeaderBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_UINT8,this.SystemID[13],{ fileName : "./src/mp4lib/ProtectionSystemSpecificHeaderBox.hx", lineNumber : 43, className : "mp4lib.ProtectionSystemSpecificHeaderBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_UINT8,this.SystemID[14],{ fileName : "./src/mp4lib/ProtectionSystemSpecificHeaderBox.hx", lineNumber : 43, className : "mp4lib.ProtectionSystemSpecificHeaderBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_UINT8,this.SystemID[15],{ fileName : "./src/mp4lib/ProtectionSystemSpecificHeaderBox.hx", lineNumber : 43, className : "mp4lib.ProtectionSystemSpecificHeaderBox", methodName : "write"});
		if(this.version == 1) {
			this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.KID_count,{ fileName : "./src/mp4lib/ProtectionSystemSpecificHeaderBox.hx", lineNumber : 46, className : "mp4lib.ProtectionSystemSpecificHeaderBox", methodName : "write"});
			var _g = 0;
			var _g1 = this.KID_count;
			while(_g < _g1) {
				var i = _g++;
				this._writeArrayData(data,mp4lib_Fields.FIELD_UINT8,this.KIDS[i]);
			}
		}
		this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.DataSize,{ fileName : "./src/mp4lib/ProtectionSystemSpecificHeaderBox.hx", lineNumber : 51, className : "mp4lib.ProtectionSystemSpecificHeaderBox", methodName : "write"});
		var _g2 = 0;
		var _g11 = this.DataSize;
		while(_g2 < _g11) {
			var i1 = _g2++;
			this._writeData(data,mp4lib_Fields.FIELD_UINT8,this.Data[i1],{ fileName : "./src/mp4lib/ProtectionSystemSpecificHeaderBox.hx", lineNumber : 53, className : "mp4lib.ProtectionSystemSpecificHeaderBox", methodName : "write"});
		}
		return this.localPos;
	}
});
var mp4lib_SampleAuxiliaryInformationSizesBox = function(size) {
	mp4lib_FullBox.call(this,"saiz",size);
};
mp4lib_SampleAuxiliaryInformationSizesBox.__name__ = true;
mp4lib_SampleAuxiliaryInformationSizesBox.__super__ = mp4lib_FullBox;
mp4lib_SampleAuxiliaryInformationSizesBox.prototype = $extend(mp4lib_FullBox.prototype,{
	computeLength: function() {
		mp4lib_FullBox.prototype.computeLength.call(this);
		if((this.flags & 1) > 0) {
			this.size += mp4lib_Fields.FIELD_UINT32.getLength() * 2;
		}
		this.size += mp4lib_Fields.FIELD_UINT8.getLength() + mp4lib_Fields.FIELD_UINT32.getLength();
		if(this.default_sample_info_size == 0) {
			var a = this.size;
			var a1 = mp4lib_Fields.FIELD_UINT8.getLength();
			this.size = a + haxe__$Int32_Int32_$Impl_$._mul(a1,this.sample_count) | 0;
		}
	}
	,read: function(data,pos,end) {
		mp4lib_FullBox.prototype.read.call(this,data,pos,end);
		if((this.flags & 1) > 0) {
			this.aux_info_type = this._readData(data,mp4lib_Fields.FIELD_UINT32);
			this.aux_info_type_parameter = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		}
		this.default_sample_info_size = this._readData(data,mp4lib_Fields.FIELD_UINT8);
		this.sample_count = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		if(this.default_sample_info_size == 0) {
			this.sample_info_size = this._readArrayFieldData(data,mp4lib_Fields.FIELD_UINT8,this.sample_count);
		}
		return this.localPos;
	}
	,write: function(data,pos) {
		mp4lib_FullBox.prototype.write.call(this,data,pos);
		if((this.flags & 1) > 0) {
			this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.aux_info_type,{ fileName : "./src/mp4lib/SampleAuxiliaryInformationSizesBox.hx", lineNumber : 47, className : "mp4lib.SampleAuxiliaryInformationSizesBox", methodName : "write"});
			this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.aux_info_type_parameter,{ fileName : "./src/mp4lib/SampleAuxiliaryInformationSizesBox.hx", lineNumber : 48, className : "mp4lib.SampleAuxiliaryInformationSizesBox", methodName : "write"});
		}
		this._writeData(data,mp4lib_Fields.FIELD_UINT8,this.default_sample_info_size,{ fileName : "./src/mp4lib/SampleAuxiliaryInformationSizesBox.hx", lineNumber : 50, className : "mp4lib.SampleAuxiliaryInformationSizesBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.sample_count,{ fileName : "./src/mp4lib/SampleAuxiliaryInformationSizesBox.hx", lineNumber : 51, className : "mp4lib.SampleAuxiliaryInformationSizesBox", methodName : "write"});
		if(this.default_sample_info_size == 0) {
			var _g = 0;
			var _g1 = this.sample_count;
			while(_g < _g1) {
				var i = _g++;
				this._writeData(data,mp4lib_Fields.FIELD_UINT8,this.sample_info_size[i],{ fileName : "./src/mp4lib/SampleAuxiliaryInformationSizesBox.hx", lineNumber : 54, className : "mp4lib.SampleAuxiliaryInformationSizesBox", methodName : "write"});
			}
		}
		return this.localPos;
	}
});
var mp4lib_SampleAuxiliaryInformationOffsetsBox = function(size) {
	mp4lib_FullBox.call(this,"saio",size);
};
mp4lib_SampleAuxiliaryInformationOffsetsBox.__name__ = true;
mp4lib_SampleAuxiliaryInformationOffsetsBox.__super__ = mp4lib_FullBox;
mp4lib_SampleAuxiliaryInformationOffsetsBox.prototype = $extend(mp4lib_FullBox.prototype,{
	computeLength: function() {
		mp4lib_FullBox.prototype.computeLength.call(this);
		if((this.flags & 1) > 0) {
			this.size += mp4lib_Fields.FIELD_UINT32.getLength() * 2;
		}
		this.size += mp4lib_Fields.FIELD_UINT32.getLength();
		if(this.version == 0) {
			var a = this.size;
			var a1 = mp4lib_Fields.FIELD_UINT32.getLength();
			this.size = a + haxe__$Int32_Int32_$Impl_$._mul(a1,this.entry_count) | 0;
		} else {
			var a2 = this.size;
			var a3 = mp4lib_Fields.FIELD_UINT64.getLength();
			this.size = a2 + haxe__$Int32_Int32_$Impl_$._mul(a3,this.entry_count) | 0;
		}
	}
	,read: function(data,pos,end) {
		mp4lib_FullBox.prototype.read.call(this,data,pos,end);
		if((this.flags & 1) > 0) {
			this.aux_info_type = this._readData(data,mp4lib_Fields.FIELD_UINT32);
			this.aux_info_type_parameter = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		}
		this.entry_count = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		if(this.version == 0) {
			this.offset = this._readArrayFieldData(data,mp4lib_Fields.FIELD_UINT32,this.entry_count);
		} else {
			this.offset = this._readArrayFieldData(data,mp4lib_Fields.FIELD_UINT64,this.entry_count);
		}
		return this.localPos;
	}
	,write: function(data,pos) {
		mp4lib_FullBox.prototype.write.call(this,data,pos);
		if((this.flags & 1) > 0) {
			this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.aux_info_type,{ fileName : "./src/mp4lib/SampleAuxiliaryInformationOffsetsBox.hx", lineNumber : 46, className : "mp4lib.SampleAuxiliaryInformationOffsetsBox", methodName : "write"});
			this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.aux_info_type_parameter,{ fileName : "./src/mp4lib/SampleAuxiliaryInformationOffsetsBox.hx", lineNumber : 47, className : "mp4lib.SampleAuxiliaryInformationOffsetsBox", methodName : "write"});
		}
		this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.entry_count,{ fileName : "./src/mp4lib/SampleAuxiliaryInformationOffsetsBox.hx", lineNumber : 49, className : "mp4lib.SampleAuxiliaryInformationOffsetsBox", methodName : "write"});
		var _g = 0;
		var _g1 = this.entry_count;
		while(_g < _g1) {
			var i = _g++;
			this._writeData(data,this.version == 0 ? mp4lib_Fields.FIELD_UINT32 : mp4lib_Fields.FIELD_UINT64,this.offset[i],{ fileName : "./src/mp4lib/SampleAuxiliaryInformationOffsetsBox.hx", lineNumber : 52, className : "mp4lib.SampleAuxiliaryInformationOffsetsBox", methodName : "write"});
		}
		return this.localPos;
	}
});
var mp4lib_ProtectionSchemeInformationBox = function(size) {
	mp4lib_ContainerBox.call(this,"sinf",size);
};
mp4lib_ProtectionSchemeInformationBox.__name__ = true;
mp4lib_ProtectionSchemeInformationBox.__super__ = mp4lib_ContainerBox;
mp4lib_ProtectionSchemeInformationBox.prototype = $extend(mp4lib_ContainerBox.prototype,{
});
var mp4lib_SchemeInformationBox = function(size) {
	mp4lib_ContainerBox.call(this,"schi",size);
};
mp4lib_SchemeInformationBox.__name__ = true;
mp4lib_SchemeInformationBox.__super__ = mp4lib_ContainerBox;
mp4lib_SchemeInformationBox.prototype = $extend(mp4lib_ContainerBox.prototype,{
});
var mp4lib_TrackEncryptionBox = function(size) {
	mp4lib_FullBox.call(this,"tenc",size);
};
mp4lib_TrackEncryptionBox.__name__ = true;
mp4lib_TrackEncryptionBox.__super__ = mp4lib_FullBox;
mp4lib_TrackEncryptionBox.prototype = $extend(mp4lib_FullBox.prototype,{
	computeLength: function() {
		mp4lib_FullBox.prototype.computeLength.call(this);
		this.size += mp4lib_Fields.FIELD_BIT24.getLength();
		this.size += mp4lib_Fields.FIELD_UINT8.getLength();
		this.size += mp4lib_Fields.FIELD_UINT8.getLength() * 16;
	}
	,write: function(data,pos) {
		mp4lib_FullBox.prototype.write.call(this,data,pos);
		this._writeData(data,mp4lib_Fields.FIELD_BIT24,this.default_IsEncrypted,{ fileName : "./src/mp4lib/TrackEncryptionBox.hx", lineNumber : 20, className : "mp4lib.TrackEncryptionBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_UINT8,this.default_IV_size,{ fileName : "./src/mp4lib/TrackEncryptionBox.hx", lineNumber : 21, className : "mp4lib.TrackEncryptionBox", methodName : "write"});
		this._writeArrayData(data,mp4lib_Fields.FIELD_UINT8,this.default_KID);
		return this.localPos;
	}
	,read: function(data,pos,end) {
		mp4lib_FullBox.prototype.read.call(this,data,pos,end);
		this.default_IsEncrypted = this._readData(data,mp4lib_Fields.FIELD_BIT24);
		this.default_IV_size = this._readData(data,mp4lib_Fields.FIELD_UINT8);
		this.default_KID = this._readArrayFieldData(data,mp4lib_Fields.FIELD_UINT8,16);
		return this.localPos;
	}
});
var mp4lib_SchemeTypeBox = function(size) {
	mp4lib_FullBox.call(this,"schm",size);
};
mp4lib_SchemeTypeBox.__name__ = true;
mp4lib_SchemeTypeBox.__super__ = mp4lib_FullBox;
mp4lib_SchemeTypeBox.prototype = $extend(mp4lib_FullBox.prototype,{
	computeLength: function() {
		mp4lib_FullBox.prototype.computeLength.call(this);
		this.size += mp4lib_Fields.FIELD_UINT32.getLength() * 2;
		if((this.flags & 1) != 0) {
			this.size += mp4lib_Fields.FIELD_STRING.getLength(this.scheme_uri);
		}
	}
	,write: function(data,pos) {
		mp4lib_FullBox.prototype.write.call(this,data,pos);
		this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.scheme_type,{ fileName : "./src/mp4lib/SchemeTypeBox.hx", lineNumber : 20, className : "mp4lib.SchemeTypeBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.scheme_version,{ fileName : "./src/mp4lib/SchemeTypeBox.hx", lineNumber : 21, className : "mp4lib.SchemeTypeBox", methodName : "write"});
		if((this.flags & 1) != 0) {
			this._writeData(data,mp4lib_Fields.FIELD_STRING,this.scheme_uri,{ fileName : "./src/mp4lib/SchemeTypeBox.hx", lineNumber : 23, className : "mp4lib.SchemeTypeBox", methodName : "write"});
		}
		return this.localPos;
	}
	,read: function(data,pos,end) {
		mp4lib_FullBox.prototype.read.call(this,data,pos,end);
		this.scheme_type = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		this.scheme_version = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		if((this.flags & 1) != 0) {
			this.scheme_uri = this._readData(data,mp4lib_Fields.FIELD_STRING);
		}
		return this.localPos;
	}
});
var mp4lib_EditListBox = function(size) {
	mp4lib_FullBox.call(this,"elst",size);
	this.entries = [];
};
mp4lib_EditListBox.__name__ = true;
mp4lib_EditListBox.__super__ = mp4lib_FullBox;
mp4lib_EditListBox.prototype = $extend(mp4lib_FullBox.prototype,{
	computeLength: function() {
		mp4lib_FullBox.prototype.computeLength.call(this);
		this.size += mp4lib_Fields.FIELD_UINT32.getLength() * 2;
		if(this.version == 1) {
			var a = this.size;
			var a1 = mp4lib_Fields.FIELD_UINT64.getLength() * 2 + mp4lib_Fields.FIELD_UINT16.getLength() * 2;
			this.size = a + haxe__$Int32_Int32_$Impl_$._mul(a1,this.entry_count) | 0;
		} else {
			var a2 = this.size;
			var a3 = mp4lib_Fields.FIELD_UINT32.getLength() * 2 + mp4lib_Fields.FIELD_UINT16.getLength() * 2;
			this.size = a2 + haxe__$Int32_Int32_$Impl_$._mul(a3,this.entry_count) | 0;
		}
	}
	,write: function(data,pos) {
		mp4lib_FullBox.prototype.write.call(this,data,pos);
		this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.entry_count,{ fileName : "./src/mp4lib/EditListBox.hx", lineNumber : 27, className : "mp4lib.EditListBox", methodName : "write"});
		var _g = 0;
		var _g1 = this.entry_count;
		while(_g < _g1) {
			var i = _g++;
			if(this.version == 0) {
				this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.entries[i].segment_duration,{ fileName : "./src/mp4lib/EditListBox.hx", lineNumber : 30, className : "mp4lib.EditListBox", methodName : "write"});
				this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.entries[i].media_time,{ fileName : "./src/mp4lib/EditListBox.hx", lineNumber : 31, className : "mp4lib.EditListBox", methodName : "write"});
			} else {
				this._writeData(data,mp4lib_Fields.FIELD_UINT64,this.entries[i].segment_duration,{ fileName : "./src/mp4lib/EditListBox.hx", lineNumber : 33, className : "mp4lib.EditListBox", methodName : "write"});
				this._writeData(data,mp4lib_Fields.FIELD_UINT64,this.entries[i].media_time,{ fileName : "./src/mp4lib/EditListBox.hx", lineNumber : 34, className : "mp4lib.EditListBox", methodName : "write"});
			}
			this._writeData(data,mp4lib_Fields.FIELD_UINT16,this.entries[i].media_rate_integer,{ fileName : "./src/mp4lib/EditListBox.hx", lineNumber : 36, className : "mp4lib.EditListBox", methodName : "write"});
			this._writeData(data,mp4lib_Fields.FIELD_UINT16,this.entries[i].media_rate_fraction,{ fileName : "./src/mp4lib/EditListBox.hx", lineNumber : 37, className : "mp4lib.EditListBox", methodName : "write"});
		}
		return this.localPos;
	}
	,read: function(data,pos,end) {
		mp4lib_FullBox.prototype.read.call(this,data,pos,end);
		var i = 0;
		var struct = { };
		this.entry_count = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		var _g = 0;
		var _g1 = this.entry_count;
		while(_g < _g1) {
			var i1 = _g++;
			this.entries.push({ segment_duration : this._readData(data,this.version == 0 ? mp4lib_Fields.FIELD_UINT32 : mp4lib_Fields.FIELD_UINT64), media_time : this._readData(data,this.version == 0 ? mp4lib_Fields.FIELD_UINT32 : mp4lib_Fields.FIELD_UINT64), media_rate_integer : this._readData(data,mp4lib_Fields.FIELD_UINT16), media_rate_fraction : this._readData(data,mp4lib_Fields.FIELD_UINT16)});
		}
		return this.localPos;
	}
});
var mp4lib_HintMediaHeaderBox = function(size) {
	mp4lib_FullBox.call(this,"hmhd",size);
};
mp4lib_HintMediaHeaderBox.__name__ = true;
mp4lib_HintMediaHeaderBox.__super__ = mp4lib_FullBox;
mp4lib_HintMediaHeaderBox.prototype = $extend(mp4lib_FullBox.prototype,{
	computeLength: function() {
		mp4lib_FullBox.prototype.computeLength.call(this);
		this.size += mp4lib_Fields.FIELD_UINT16.getLength() * 2;
		this.size += mp4lib_Fields.FIELD_UINT32.getLength() * 3;
	}
	,write: function(data,pos) {
		mp4lib_FullBox.prototype.write.call(this,data,pos);
		this._writeData(data,mp4lib_Fields.FIELD_UINT16,this.maxPDUsize,{ fileName : "./src/mp4lib/HintMediaHeaderBox.hx", lineNumber : 20, className : "mp4lib.HintMediaHeaderBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_UINT16,this.avgPDUsize,{ fileName : "./src/mp4lib/HintMediaHeaderBox.hx", lineNumber : 21, className : "mp4lib.HintMediaHeaderBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.maxbitrate,{ fileName : "./src/mp4lib/HintMediaHeaderBox.hx", lineNumber : 22, className : "mp4lib.HintMediaHeaderBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.avgbitrate,{ fileName : "./src/mp4lib/HintMediaHeaderBox.hx", lineNumber : 23, className : "mp4lib.HintMediaHeaderBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.reserved,{ fileName : "./src/mp4lib/HintMediaHeaderBox.hx", lineNumber : 24, className : "mp4lib.HintMediaHeaderBox", methodName : "write"});
		return this.localPos;
	}
	,read: function(data,pos,end) {
		mp4lib_FullBox.prototype.read.call(this,data,pos,end);
		this.maxPDUsize = this._readData(data,mp4lib_Fields.FIELD_UINT16);
		this.avgPDUsize = this._readData(data,mp4lib_Fields.FIELD_UINT16);
		this.maxbitrate = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		this.avgbitrate = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		this.reserved = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		return this.localPos;
	}
});
var mp4lib_NullMediaHeaderBox = function(size) {
	mp4lib_FullBox.call(this,"nmhd",size);
};
mp4lib_NullMediaHeaderBox.__name__ = true;
mp4lib_NullMediaHeaderBox.__super__ = mp4lib_FullBox;
mp4lib_NullMediaHeaderBox.prototype = $extend(mp4lib_FullBox.prototype,{
});
var mp4lib_CompositionOffsetBox = function(size) {
	mp4lib_FullBox.call(this,"ctts",size);
};
mp4lib_CompositionOffsetBox.__name__ = true;
mp4lib_CompositionOffsetBox.__super__ = mp4lib_FullBox;
mp4lib_CompositionOffsetBox.prototype = $extend(mp4lib_FullBox.prototype,{
	computeLength: function() {
		mp4lib_FullBox.prototype.computeLength.call(this);
		this.size += mp4lib_Fields.FIELD_UINT32.getLength();
		if(this.version == 0) {
			var a = this.size;
			var a1 = mp4lib_Fields.FIELD_UINT32.getLength() * 2;
			this.size = a + haxe__$Int32_Int32_$Impl_$._mul(a1,this.entry_count) | 0;
		} else {
			var a2 = this.size;
			var a3 = mp4lib_Fields.FIELD_UINT32.getLength() + mp4lib_Fields.FIELD_INT32.getLength();
			this.size = a2 + haxe__$Int32_Int32_$Impl_$._mul(a3,this.entry_count) | 0;
		}
	}
	,write: function(data,pos) {
		mp4lib_FullBox.prototype.write.call(this,data,pos);
		var _g = 0;
		var _g1 = this.entry_count;
		while(_g < _g1) {
			var i = _g++;
			if(this.version == 0) {
				this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.entries[i].sample_count,{ fileName : "./src/mp4lib/CompositionOffsetBox.hx", lineNumber : 27, className : "mp4lib.CompositionOffsetBox", methodName : "write"});
				this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.entries[i].sample_offset,{ fileName : "./src/mp4lib/CompositionOffsetBox.hx", lineNumber : 28, className : "mp4lib.CompositionOffsetBox", methodName : "write"});
			} else {
				this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.entries[i].sample_count,{ fileName : "./src/mp4lib/CompositionOffsetBox.hx", lineNumber : 30, className : "mp4lib.CompositionOffsetBox", methodName : "write"});
				this._writeData(data,mp4lib_Fields.FIELD_INT32,this.entries[i].sample_offset,{ fileName : "./src/mp4lib/CompositionOffsetBox.hx", lineNumber : 31, className : "mp4lib.CompositionOffsetBox", methodName : "write"});
			}
		}
		return this.localPos;
	}
	,read: function(data,pos,end) {
		mp4lib_FullBox.prototype.read.call(this,data,pos,end);
		var i = 0;
		var struct = { };
		this.entry_count = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		var _g = 0;
		var _g1 = this.entry_count;
		while(_g < _g1) {
			var i1 = _g++;
			this.entries.push({ sample_count : this._readData(data,mp4lib_Fields.FIELD_UINT32), sample_offset : this.version == 0 ? this._readData(data,mp4lib_Fields.FIELD_UINT32) : this._readData(data,mp4lib_Fields.FIELD_INT32)});
		}
		return this.localPos;
	}
});
var mp4lib_CompositionToDecodeBox = function(size) {
	mp4lib_FullBox.call(this,"cslg",size);
};
mp4lib_CompositionToDecodeBox.__name__ = true;
mp4lib_CompositionToDecodeBox.__super__ = mp4lib_FullBox;
mp4lib_CompositionToDecodeBox.prototype = $extend(mp4lib_FullBox.prototype,{
	computeLength: function() {
		mp4lib_FullBox.prototype.computeLength.call(this);
		this.size += mp4lib_Fields.FIELD_INT32.getLength() * 5;
	}
	,read: function(data,pos,end) {
		mp4lib_FullBox.prototype.read.call(this,data,pos,end);
		this.compositionToDTSShift = this._readData(data,mp4lib_Fields.FIELD_INT32);
		this.leastDecodeToDisplayDelta = this._readData(data,mp4lib_Fields.FIELD_INT32);
		this.greatestDecodeToDisplayDelta = this._readData(data,mp4lib_Fields.FIELD_INT32);
		this.compositionStartTime = this._readData(data,mp4lib_Fields.FIELD_INT32);
		this.compositionEndTime = this._readData(data,mp4lib_Fields.FIELD_INT32);
		return this.localPos;
	}
	,write: function(data,pos) {
		mp4lib_FullBox.prototype.write.call(this,data,pos);
		this._writeData(data,mp4lib_Fields.FIELD_INT32,this.compositionToDTSShift,{ fileName : "./src/mp4lib/CompositionToDecodeBox.hx", lineNumber : 31, className : "mp4lib.CompositionToDecodeBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_INT32,this.leastDecodeToDisplayDelta,{ fileName : "./src/mp4lib/CompositionToDecodeBox.hx", lineNumber : 32, className : "mp4lib.CompositionToDecodeBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_INT32,this.greatestDecodeToDisplayDelta,{ fileName : "./src/mp4lib/CompositionToDecodeBox.hx", lineNumber : 33, className : "mp4lib.CompositionToDecodeBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_INT32,this.compositionStartTime,{ fileName : "./src/mp4lib/CompositionToDecodeBox.hx", lineNumber : 34, className : "mp4lib.CompositionToDecodeBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_INT32,this.compositionEndTime,{ fileName : "./src/mp4lib/CompositionToDecodeBox.hx", lineNumber : 35, className : "mp4lib.CompositionToDecodeBox", methodName : "write"});
		return this.localPos;
	}
});
var mp4lib_SyncSampleBox = function(size) {
	mp4lib_FullBox.call(this,"stss",size);
	this.entries = [];
};
mp4lib_SyncSampleBox.__name__ = true;
mp4lib_SyncSampleBox.__super__ = mp4lib_FullBox;
mp4lib_SyncSampleBox.prototype = $extend(mp4lib_FullBox.prototype,{
	computeLength: function() {
		mp4lib_FullBox.prototype.computeLength.call(this);
		this.size += mp4lib_Fields.FIELD_UINT32.getLength();
		this.size += mp4lib_Fields.FIELD_UINT32.getLength() * this.entry_count;
	}
	,read: function(data,pos,end) {
		mp4lib_FullBox.prototype.read.call(this,data,pos,end);
		this.entry_count = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		var _g = 0;
		var _g1 = this.entry_count;
		while(_g < _g1) {
			var i = _g++;
			this.entries.push({ sample_number : this._readData(data,mp4lib_Fields.FIELD_UINT32)});
		}
		return this.localPos;
	}
	,write: function(data,pos) {
		mp4lib_FullBox.prototype.write.call(this,data,pos);
		this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.entry_count,{ fileName : "./src/mp4lib/SyncSampleBox.hx", lineNumber : 32, className : "mp4lib.SyncSampleBox", methodName : "write"});
		var _g = 0;
		var _g1 = this.entry_count;
		while(_g < _g1) {
			var i = _g++;
			this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.entries[i].sample_number,{ fileName : "./src/mp4lib/SyncSampleBox.hx", lineNumber : 34, className : "mp4lib.SyncSampleBox", methodName : "write"});
		}
		return this.localPos;
	}
});
var mp4lib_TrackReferenceBox = function(size) {
	mp4lib_FullBox.call(this,"tref",size);
};
mp4lib_TrackReferenceBox.__name__ = true;
mp4lib_TrackReferenceBox.__super__ = mp4lib_FullBox;
mp4lib_TrackReferenceBox.prototype = $extend(mp4lib_FullBox.prototype,{
	computeLength: function() {
		mp4lib_FullBox.prototype.computeLength.call(this);
		this.size += mp4lib_Fields.FIELD_UINT32.getLength() * this.track_IDs.length;
	}
	,read: function(data,pos,end) {
		mp4lib_FullBox.prototype.read.call(this,data,pos,end);
		this.track_IDs = this._readArrayData(data,mp4lib_Fields.FIELD_UINT32);
		return this.localPos;
	}
	,write: function(data,pos) {
		mp4lib_FullBox.prototype.write.call(this,data,pos);
		this._writeArrayData(data,mp4lib_Fields.FIELD_UINT32,this.track_IDs);
		return this.localPos;
	}
});
var mp4lib_OriginalFormatBox = function(size) {
	mp4lib_Box.call(this,"frma",size);
};
mp4lib_OriginalFormatBox.__name__ = true;
mp4lib_OriginalFormatBox.__super__ = mp4lib_Box;
mp4lib_OriginalFormatBox.prototype = $extend(mp4lib_Box.prototype,{
	computeLength: function() {
		mp4lib_Box.prototype.computeLength.call(this);
		this.size += mp4lib_Fields.FIELD_UINT32.getLength();
	}
	,write: function(data,pos) {
		mp4lib_Box.prototype.write.call(this,data,pos);
		this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.data_format,{ fileName : "./src/mp4lib/OriginalFormatBox.hx", lineNumber : 15, className : "mp4lib.OriginalFormatBox", methodName : "write"});
		return this.localPos;
	}
	,read: function(data,pos,end) {
		this.localPos = pos;
		this.localEnd = end;
		this.data_format = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		return this.localPos;
	}
});
var mp4lib_SubtitleSampleEntry = function(size) {
	this.auxiliary_mime_types = null;
	this.schema_location = null;
	this.namespace = null;
	mp4lib_Box.call(this,"stpp",size);
};
mp4lib_SubtitleSampleEntry.__name__ = true;
mp4lib_SubtitleSampleEntry.__super__ = mp4lib_Box;
mp4lib_SubtitleSampleEntry.prototype = $extend(mp4lib_Box.prototype,{
	read: function(data,pos,end) {
		this.localPos = pos;
		this.localEnd = end;
		this.namespace = this._readData(data,mp4lib_Fields.FIELD_STRING_UTF8);
		this.schema_location = this._readData(data,mp4lib_Fields.FIELD_STRING_UTF8);
		this.auxiliary_mime_types = this._readData(data,mp4lib_Fields.FIELD_STRING_UTF8);
		return this.localEnd;
	}
	,write: function(data,pos) {
		mp4lib_Box.prototype.write.call(this,data,pos);
		this._writeData(data,mp4lib_Fields.FIELD_STRING_UTF8,this.namespace,{ fileName : "./src/mp4lib/SubtitleSampleEntry.hx", lineNumber : 26, className : "mp4lib.SubtitleSampleEntry", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_STRING_UTF8,this.schema_location,{ fileName : "./src/mp4lib/SubtitleSampleEntry.hx", lineNumber : 27, className : "mp4lib.SubtitleSampleEntry", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_STRING_UTF8,this.auxiliary_mime_types,{ fileName : "./src/mp4lib/SubtitleSampleEntry.hx", lineNumber : 28, className : "mp4lib.SubtitleSampleEntry", methodName : "write"});
		return this.localPos;
	}
	,computeLength: function() {
		mp4lib_Box.prototype.computeLength.call(this);
		this.size += mp4lib_Fields.FIELD_STRING_UTF8.getLength(this.namespace) + mp4lib_Fields.FIELD_STRING_UTF8.getLength(this.schema_location) + mp4lib_Fields.FIELD_STRING_UTF8.getLength(this.auxiliary_mime_types);
	}
});
var mp4lib_DASHEventMessageBox = function(size) {
	if(size == null) {
		size = 0;
	}
	this.message_data = null;
	mp4lib_FullBox.call(this,"emsg",size);
};
mp4lib_DASHEventMessageBox.__name__ = true;
mp4lib_DASHEventMessageBox.__super__ = mp4lib_FullBox;
mp4lib_DASHEventMessageBox.prototype = $extend(mp4lib_FullBox.prototype,{
	computeLength: function() {
		mp4lib_FullBox.prototype.computeLength.call(this);
		this.size += mp4lib_Fields.FIELD_STRING.getLength(this.scheme_id_uri) + mp4lib_Fields.FIELD_STRING.getLength(this.value);
		this.size += mp4lib_Fields.FIELD_UINT32.getLength() * 4;
		this.size += mp4lib_Fields.FIELD_UINT8.getLength() * this.message_data.length;
	}
	,read: function(data,pos,end) {
		mp4lib_FullBox.prototype.read.call(this,data,pos,end);
		this.scheme_id_uri = this._readData(data,mp4lib_Fields.FIELD_STRING);
		this.value = this._readData(data,mp4lib_Fields.FIELD_STRING);
		this.timescale = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		this.presentation_time_delta = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		this.event_duration = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		this.id = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		this.message_data = this._readArrayFieldData(data,mp4lib_Fields.FIELD_UINT8,end - this.localPos);
		return this.localPos;
	}
	,write: function(data,pos) {
		mp4lib_FullBox.prototype.write.call(this,data,pos);
		throw new js__$Boot_HaxeError("not implemented");
	}
});
var mp4lib_MPEG4BitRateBox = function(size) {
	mp4lib_Box.call(this,"btrt",size);
};
mp4lib_MPEG4BitRateBox.__name__ = true;
mp4lib_MPEG4BitRateBox.__super__ = mp4lib_Box;
mp4lib_MPEG4BitRateBox.prototype = $extend(mp4lib_Box.prototype,{
	computeLength: function() {
		mp4lib_Box.prototype.computeLength.call(this);
		this.size += mp4lib_Fields.FIELD_UINT32.getLength() * 3;
	}
	,write: function(data,pos) {
		mp4lib_Box.prototype.write.call(this,data,pos);
		this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.bufferSizeDB,{ fileName : "./src/mp4lib/MPEG4BitRateBox.hx", lineNumber : 17, className : "mp4lib.MPEG4BitRateBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.maxBitrate,{ fileName : "./src/mp4lib/MPEG4BitRateBox.hx", lineNumber : 18, className : "mp4lib.MPEG4BitRateBox", methodName : "write"});
		this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.avgBitrate,{ fileName : "./src/mp4lib/MPEG4BitRateBox.hx", lineNumber : 19, className : "mp4lib.MPEG4BitRateBox", methodName : "write"});
		return this.localPos;
	}
	,read: function(data,pos,end) {
		this.localPos = pos;
		this.localEnd = end;
		this.bufferSizeDB = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		this.maxBitrate = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		this.avgBitrate = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		return this.localPos;
	}
});
var mp4lib_TfxdBox = function(size) {
	mp4lib_FullBox.call(this,"tfxd",size,haxe_io__$UInt8Array_UInt8Array_$Impl_$.fromArray([109,29,155,5,66,213,68,230,128,226,20,29,175,247,87,178]));
};
mp4lib_TfxdBox.__name__ = true;
mp4lib_TfxdBox.__super__ = mp4lib_FullBox;
mp4lib_TfxdBox.prototype = $extend(mp4lib_FullBox.prototype,{
	computeLength: function() {
		mp4lib_FullBox.prototype.computeLength.call(this);
		if(this.version == 1) {
			this.size += mp4lib_Fields.FIELD_UINT64.getLength() * 2;
		} else {
			this.size += mp4lib_Fields.FIELD_UINT32.getLength() * 2;
		}
	}
	,read: function(data,pos,end) {
		mp4lib_FullBox.prototype.read.call(this,data,pos,end);
		if(this.version == 1) {
			this.fragment_absolute_time = this._readData(data,mp4lib_Fields.FIELD_UINT64);
			this.fragment_duration = this._readData(data,mp4lib_Fields.FIELD_UINT64);
		} else {
			this.fragment_absolute_time = this._readData(data,mp4lib_Fields.FIELD_UINT32);
			this.fragment_duration = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		}
		return this.localPos;
	}
	,write: function(data,pos) {
		mp4lib_FullBox.prototype.write.call(this,data,pos);
		if(this.version == 1) {
			this._writeData(data,mp4lib_Fields.FIELD_UINT64,this.fragment_absolute_time,{ fileName : "./src/mp4lib/TfxdBox.hx", lineNumber : 38, className : "mp4lib.TfxdBox", methodName : "write"});
			this._writeData(data,mp4lib_Fields.FIELD_UINT64,this.fragment_duration,{ fileName : "./src/mp4lib/TfxdBox.hx", lineNumber : 39, className : "mp4lib.TfxdBox", methodName : "write"});
		} else {
			this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.fragment_absolute_time,{ fileName : "./src/mp4lib/TfxdBox.hx", lineNumber : 41, className : "mp4lib.TfxdBox", methodName : "write"});
			this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.fragment_duration,{ fileName : "./src/mp4lib/TfxdBox.hx", lineNumber : 42, className : "mp4lib.TfxdBox", methodName : "write"});
		}
		return this.localPos;
	}
});
var mp4lib_TfrfBox = function(size) {
	mp4lib_FullBox.call(this,"tfrf",size,haxe_io__$UInt8Array_UInt8Array_$Impl_$.fromArray([212,128,126,242,202,57,70,149,142,84,38,203,158,70,167,159]));
};
mp4lib_TfrfBox.__name__ = true;
mp4lib_TfrfBox.__super__ = mp4lib_FullBox;
mp4lib_TfrfBox.prototype = $extend(mp4lib_FullBox.prototype,{
	computeLength: function() {
		mp4lib_FullBox.prototype.computeLength.call(this);
		this.size += mp4lib_Fields.FIELD_UINT8.getLength();
		if(this.version == 1) {
			this.size += mp4lib_Fields.FIELD_UINT64.getLength() * 2 * this.fragment_count;
		} else {
			this.size += mp4lib_Fields.FIELD_UINT32.getLength() * 2 * this.fragment_count;
		}
	}
	,read: function(data,pos,end) {
		mp4lib_FullBox.prototype.read.call(this,data,pos,end);
		this.fragment_count = this._readData(data,mp4lib_Fields.FIELD_UINT8);
		this.entry = [];
		var _g = 0;
		var _g1 = this.fragment_count;
		while(_g < _g1) {
			var i = _g++;
			var struct = { fragment_duration : null, fragment_absolute_time : null};
			if(this.version == 1) {
				struct.fragment_absolute_time = this._readData(data,mp4lib_Fields.FIELD_UINT64);
				struct.fragment_duration = this._readData(data,mp4lib_Fields.FIELD_UINT64);
			} else {
				struct.fragment_absolute_time = this._readData(data,mp4lib_Fields.FIELD_UINT32);
				struct.fragment_duration = this._readData(data,mp4lib_Fields.FIELD_UINT32);
			}
			this.entry.push(struct);
		}
		return this.localPos;
	}
	,write: function(data,pos) {
		mp4lib_FullBox.prototype.write.call(this,data,pos);
		this._writeData(data,mp4lib_Fields.FIELD_UINT8,this.fragment_count,{ fileName : "./src/mp4lib/TfrfBox.hx", lineNumber : 49, className : "mp4lib.TfrfBox", methodName : "write"});
		var _g = 0;
		var _g1 = this.fragment_count;
		while(_g < _g1) {
			var i = _g++;
			if(this.version == 1) {
				this._writeData(data,mp4lib_Fields.FIELD_UINT64,this.entry[i].fragment_absolute_time,{ fileName : "./src/mp4lib/TfrfBox.hx", lineNumber : 52, className : "mp4lib.TfrfBox", methodName : "write"});
				this._writeData(data,mp4lib_Fields.FIELD_UINT64,this.entry[i].fragment_duration,{ fileName : "./src/mp4lib/TfrfBox.hx", lineNumber : 53, className : "mp4lib.TfrfBox", methodName : "write"});
			} else {
				this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.entry[i].fragment_absolute_time,{ fileName : "./src/mp4lib/TfrfBox.hx", lineNumber : 55, className : "mp4lib.TfrfBox", methodName : "write"});
				this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.entry[i].fragment_duration,{ fileName : "./src/mp4lib/TfrfBox.hx", lineNumber : 56, className : "mp4lib.TfrfBox", methodName : "write"});
			}
		}
		return this.localPos;
	}
});
var mp4lib_PiffProtectionSystemSpecificHeaderBox = function(size) {
	mp4lib_FullBox.call(this,"psshpiff",size,haxe_io__$UInt8Array_UInt8Array_$Impl_$.fromArray([208,138,79,24,16,243,74,130,182,200,50,216,171,161,131,211]));
};
mp4lib_PiffProtectionSystemSpecificHeaderBox.__name__ = true;
mp4lib_PiffProtectionSystemSpecificHeaderBox.__super__ = mp4lib_FullBox;
mp4lib_PiffProtectionSystemSpecificHeaderBox.prototype = $extend(mp4lib_FullBox.prototype,{
});
var mp4lib_PiffTrackEncryptionBox = function(size) {
	mp4lib_FullBox.call(this,"tepiff",size,haxe_io__$UInt8Array_UInt8Array_$Impl_$.fromArray([137,116,219,206,123,231,76,81,132,249,113,72,249,136,37,84]));
};
mp4lib_PiffTrackEncryptionBox.__name__ = true;
mp4lib_PiffTrackEncryptionBox.__super__ = mp4lib_FullBox;
mp4lib_PiffTrackEncryptionBox.prototype = $extend(mp4lib_FullBox.prototype,{
});
var mp4lib_PiffSampleEncryptionBox = function(size) {
	mp4lib_FullBox.call(this,"sepiff",size,haxe_io__$UInt8Array_UInt8Array_$Impl_$.fromArray([162,57,79,82,90,155,79,20,162,68,108,66,124,100,141,244]));
};
mp4lib_PiffSampleEncryptionBox.__name__ = true;
mp4lib_PiffSampleEncryptionBox.__super__ = mp4lib_FullBox;
mp4lib_PiffSampleEncryptionBox.prototype = $extend(mp4lib_FullBox.prototype,{
	computeLength: function() {
		mp4lib_FullBox.prototype.computeLength.call(this);
		this.size += mp4lib_Fields.FIELD_UINT32.getLength();
		if((this.flags & 1) > 0) {
			this.size += mp4lib_Fields.FIELD_UINT8.getLength();
		}
		var _g = 0;
		var _g1 = this.sample_count;
		while(_g < _g1) {
			var i = _g++;
			this.size += 8;
			if((this.flags & 2) > 0) {
				this.size += mp4lib_Fields.FIELD_UINT16.getLength();
				var _g2 = 0;
				var _g11 = this.entry[i].NumberOfEntries;
				while(_g2 < _g11) {
					var j = _g2++;
					this.size += mp4lib_Fields.FIELD_UINT16.getLength();
					this.size += mp4lib_Fields.FIELD_UINT32.getLength();
				}
			}
		}
	}
	,read: function(data,pos,end) {
		mp4lib_FullBox.prototype.read.call(this,data,pos,end);
		this.sample_count = this._readData(data,mp4lib_Fields.FIELD_UINT32);
		if((this.flags & 1) > 0) {
			this.IV_size = this._readData(data,mp4lib_Fields.FIELD_UINT8);
		}
		this.entry = [];
		var _g = 0;
		var _g1 = this.sample_count;
		while(_g < _g1) {
			var i = _g++;
			var struct = { clearAndCryptedData : null, NumberOfEntries : null, InitializationVector : null};
			var begin = this.localPos;
			var length = this.localPos + 8;
			struct.InitializationVector = haxe_io__$UInt8Array_UInt8Array_$Impl_$.fromBytes(haxe_io_Bytes.ofData(new Uint8Array(data.buffer.slice(begin,length == null ? null : begin + length)).buffer));
			this.localPos += 8;
			if((this.flags & 2) > 0) {
				struct.NumberOfEntries = this._readData(data,mp4lib_Fields.FIELD_UINT16);
				struct.clearAndCryptedData = [];
				var _g2 = 0;
				var _g11 = struct.NumberOfEntries;
				while(_g2 < _g11) {
					var j = _g2++;
					var clearAndCryptedStruct = { BytesOfEncryptedData : null, BytesOfClearData : null};
					clearAndCryptedStruct.BytesOfClearData = this._readData(data,mp4lib_Fields.FIELD_UINT16);
					clearAndCryptedStruct.BytesOfEncryptedData = this._readData(data,mp4lib_Fields.FIELD_UINT32);
					struct.clearAndCryptedData.push(clearAndCryptedStruct);
				}
			}
			this.entry.push(struct);
		}
		return this.localPos;
	}
	,write: function(data,pos) {
		mp4lib_FullBox.prototype.write.call(this,data,pos);
		this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.sample_count,{ fileName : "./src/mp4lib/PiffSampleEncryptionBox.hx", lineNumber : 73, className : "mp4lib.PiffSampleEncryptionBox", methodName : "write"});
		if((this.flags & 1) > 0) {
			this._writeData(data,mp4lib_Fields.FIELD_UINT8,this.IV_size,{ fileName : "./src/mp4lib/PiffSampleEncryptionBox.hx", lineNumber : 75, className : "mp4lib.PiffSampleEncryptionBox", methodName : "write"});
		}
		var _g = 0;
		var _g1 = this.sample_count;
		while(_g < _g1) {
			var i = _g++;
			this._writeBuffer(data,this.entry[i].InitializationVector,8);
			if((this.flags & 2) > 0) {
				this._writeData(data,mp4lib_Fields.FIELD_UINT16,this.entry[i].NumberOfEntries,{ fileName : "./src/mp4lib/PiffSampleEncryptionBox.hx", lineNumber : 81, className : "mp4lib.PiffSampleEncryptionBox", methodName : "write"});
				var _g2 = 0;
				var _g11 = this.entry[i].NumberOfEntries;
				while(_g2 < _g11) {
					var j = _g2++;
					this._writeData(data,mp4lib_Fields.FIELD_UINT16,this.entry[i].clearAndCryptedData[j].BytesOfClearData,{ fileName : "./src/mp4lib/PiffSampleEncryptionBox.hx", lineNumber : 83, className : "mp4lib.PiffSampleEncryptionBox", methodName : "write"});
					this._writeData(data,mp4lib_Fields.FIELD_UINT32,this.entry[i].clearAndCryptedData[j].BytesOfEncryptedData,{ fileName : "./src/mp4lib/PiffSampleEncryptionBox.hx", lineNumber : 84, className : "mp4lib.PiffSampleEncryptionBox", methodName : "write"});
				}
			}
		}
		return this.localPos;
	}
});
var Mp4lib = $hx_exports["mp4lib"] = function() {
};
Mp4lib.__name__ = true;
Mp4lib.Version = function() {
	return "stable-53-g99f1347, 2019-02-20 11:12:31";
};
Mp4lib.doGenerateInitSegment = function(tracks) {
	var moov_file = new mp4lib_File();
	var moov = new mp4lib_MovieBox();
	moov.boxes.push(Mp4lib.doMovieHeaderBox(tracks));
	var _g = 0;
	while(_g < tracks.length) {
		var track = tracks[_g];
		++_g;
		moov.boxes.push(Mp4lib.doTrackBox(track));
	}
	moov.boxes.push(Mp4lib.doMovieExtendsBox(tracks));
	var _g1 = 0;
	while(_g1 < tracks.length) {
		var track1 = tracks[_g1];
		++_g1;
		var tmp = track1.contentProtection != null;
	}
	moov_file.boxes.push(new mp4lib_FileTypeBox());
	moov_file.boxes.push(moov);
	return Mp4lib.serialize(moov_file);
};
Mp4lib.doMovieHeaderBox = function(tracks) {
	var mvhd = new mp4lib_MovieHeaderBox();
	var track = tracks[tracks.length - 1];
	mvhd.version = 1;
	var this1 = new haxe__$Int64__$_$_$Int64(0,0);
	mvhd.creation_time = this1;
	var this2 = new haxe__$Int64__$_$_$Int64(0,0);
	mvhd.modification_time = this2;
	mvhd.timescale = track.timescale;
	var x = track.duration;
	var a_high = x >> 31;
	var a_low = x;
	var x1 = track.timescale;
	var b_high = x1 >> 31;
	var b_low = x1;
	var mask = 65535;
	var al = a_low & mask;
	var ah = a_low >>> 16;
	var bl = b_low & mask;
	var bh = b_low >>> 16;
	var p00 = haxe__$Int32_Int32_$Impl_$._mul(al,bl);
	var p10 = haxe__$Int32_Int32_$Impl_$._mul(ah,bl);
	var p01 = haxe__$Int32_Int32_$Impl_$._mul(al,bh);
	var p11 = haxe__$Int32_Int32_$Impl_$._mul(ah,bh);
	var low = p00;
	var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
	p01 = p01 << 16;
	low = low + p01 | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p01) < 0) {
		var ret = high++;
		high = high | 0;
	}
	p10 = p10 << 16;
	low = low + p10 | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p10) < 0) {
		var ret1 = high++;
		high = high | 0;
	}
	high = high + (haxe__$Int32_Int32_$Impl_$._mul(a_low,b_high) + haxe__$Int32_Int32_$Impl_$._mul(a_high,b_low) | 0) | 0;
	var this3 = new haxe__$Int64__$_$_$Int64(high,low);
	mvhd.duration = this3;
	mvhd.rate = 65536;
	mvhd.volume = 256;
	mvhd.reserved = 0;
	mvhd.reserved_2 = [0,0];
	mvhd.matrix = [65536,0,0,0,65536,0,0,0,1073741824];
	mvhd.pre_defined = [0,0,0,0,0,0];
	mvhd.next_track_ID = track.trackId + 1;
	mvhd.flags = 0;
	return mvhd;
};
Mp4lib.doMovieExtendsBox = function(tracks) {
	var trex;
	var mvex = new mp4lib_MovieExtendsBox();
	var _g = 0;
	while(_g < tracks.length) {
		var track = tracks[_g];
		++_g;
		trex = new mp4lib_TrackExtendsBox();
		trex.version = 0;
		trex.flags = 0;
		trex.track_ID = track.trackId;
		trex.default_sample_description_index = 1;
		trex.default_sample_duration = 0;
		trex.default_sample_flags = 0;
		trex.default_sample_size = 0;
		mvex.boxes.push(trex);
	}
	return mvex;
};
Mp4lib.doTrackBox = function(track) {
	var trak = new mp4lib_TrackBox();
	var tkhd = new mp4lib_TrackHeaderBox();
	tkhd.version = 1;
	tkhd.flags = 7;
	var this1 = new haxe__$Int64__$_$_$Int64(0,0);
	tkhd.creation_time = this1;
	var this2 = new haxe__$Int64__$_$_$Int64(0,0);
	tkhd.modification_time = this2;
	tkhd.track_id = track.trackId;
	tkhd.reserved = 0;
	var x = track.duration;
	var a_high = x >> 31;
	var a_low = x;
	var x1 = track.timescale;
	var b_high = x1 >> 31;
	var b_low = x1;
	var mask = 65535;
	var al = a_low & mask;
	var ah = a_low >>> 16;
	var bl = b_low & mask;
	var bh = b_low >>> 16;
	var p00 = haxe__$Int32_Int32_$Impl_$._mul(al,bl);
	var p10 = haxe__$Int32_Int32_$Impl_$._mul(ah,bl);
	var p01 = haxe__$Int32_Int32_$Impl_$._mul(al,bh);
	var p11 = haxe__$Int32_Int32_$Impl_$._mul(ah,bh);
	var low = p00;
	var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
	p01 = p01 << 16;
	low = low + p01 | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p01) < 0) {
		var ret = high++;
		high = high | 0;
	}
	p10 = p10 << 16;
	low = low + p10 | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p10) < 0) {
		var ret1 = high++;
		high = high | 0;
	}
	high = high + (haxe__$Int32_Int32_$Impl_$._mul(a_low,b_high) + haxe__$Int32_Int32_$Impl_$._mul(a_high,b_low) | 0) | 0;
	var this3 = new haxe__$Int64__$_$_$Int64(high,low);
	tkhd.duration = this3;
	tkhd.reserved_2 = [0,0];
	tkhd.layer = 0;
	tkhd.alternate_group = 0;
	tkhd.volume = 256;
	tkhd.reserved_3 = 0;
	tkhd.matrix = [65536,0,0,0,65536,0,0,0,1073741824];
	tkhd.width = track.width << 16;
	tkhd.height = track.height << 16;
	trak.boxes.push(tkhd);
	var mdia = new mp4lib_MediaBox();
	mdia.boxes.push(Mp4lib.doMediaHeaderBox(track));
	mdia.boxes.push(Mp4lib.doHandlerReferenceBox(track));
	mdia.boxes.push(Mp4lib.doMediaInformationBox(track));
	trak.boxes.push(mdia);
	return trak;
};
Mp4lib.doMediaInformationBox = function(track) {
	var minf = new mp4lib_MediaInformationBox();
	switch(track.type) {
	case "audio":
		minf.boxes.push(Mp4lib.doSoundMediaHeaderBox());
		break;
	case "video":
		minf.boxes.push(Mp4lib.doVideoMediaHeaderBox());
		break;
	default:
	}
	minf.boxes.push(Mp4lib.doDataInformationBox());
	minf.boxes.push(Mp4lib.doSampleTableBox(track));
	return minf;
};
Mp4lib.doSampleTableBox = function(track) {
	var stbl = new mp4lib_SampleTableBox();
	stbl.boxes.push(Mp4lib.doDecodingTimeToSampleBox());
	stbl.boxes.push(Mp4lib.doSampleToChunkBox());
	stbl.boxes.push(Mp4lib.doChunkOffsetBox());
	stbl.boxes.push(Mp4lib.doSampleSizeBox());
	stbl.boxes.push(Mp4lib.doSampleDescriptionBox(track));
	return stbl;
};
Mp4lib.doSampleDescriptionBox = function(track) {
	var stsd = new mp4lib_SampleDescriptionBox();
	stsd.version = 0;
	stsd.flags = 0;
	switch(track.type) {
	case "audio":
		stsd.boxes.push(Mp4lib.doAudioSampleEntry(track));
		break;
	case "video":
		stsd.boxes.push(Mp4lib.doVisualSampleEntry(track));
		break;
	default:
	}
	return stsd;
};
Mp4lib.doAudioSampleEntry = function(track) {
	var codec = track.codecs.substring(0,track.codecs.indexOf("."));
	if(codec == "mp4a") {
		return Mp4lib.createMP4AudioSampleEntry(track);
	} else {
		throw new js__$Boot_HaxeError({ name : "MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_ERR_CODEC_UNSUPPORTED", message : "Codec is not supported", data : { codec : codec}});
	}
};
Mp4lib.doVisualSampleEntry = function(track) {
	var codec = track.codecs.substring(0,track.codecs.indexOf("."));
	var retval = null;
	if(codec == "avc1") {
		retval = Mp4lib.createAVCVisualSampleEntry(track);
	} else {
		throw new js__$Boot_HaxeError({ name : "MediaPlayer.dependencies.ErrorHandler.prototype.MEDIA_ERR_CODEC_UNSUPPORTED", message : "Codec is not supported", data : { codec : codec}});
	}
	return retval;
};
Mp4lib.createMPEG4AACESDescriptor = function(track) {
	var esDescriptor = new haxe_io_BytesBuffer();
	var audioSpecificConfig = Mp4lib.parseHexString(track.codecPrivateData);
	var dsiLength = audioSpecificConfig.length;
	var decoderSpecificInfo = new haxe_io_BytesBuffer();
	decoderSpecificInfo.addByte(5);
	decoderSpecificInfo.addByte(dsiLength);
	decoderSpecificInfo.addBytes(haxe_io_Bytes.ofData(audioSpecificConfig.buffer),0,audioSpecificConfig.length);
	var dcdLength = 13 + decoderSpecificInfo.pos;
	var decoderConfigDescriptor = new haxe_io_BytesBuffer();
	decoderConfigDescriptor.addByte(4);
	decoderConfigDescriptor.addByte(dcdLength);
	decoderConfigDescriptor.addByte(64);
	decoderConfigDescriptor.addByte(21);
	decoderConfigDescriptor.addByte(255);
	decoderConfigDescriptor.addByte(255);
	decoderConfigDescriptor.addByte(255);
	decoderConfigDescriptor.addByte((track.bandwidth & -16777216) >> 24);
	decoderConfigDescriptor.addByte((track.bandwidth & 16711680) >> 16);
	decoderConfigDescriptor.addByte((track.bandwidth & 65280) >> 8);
	decoderConfigDescriptor.addByte(track.bandwidth & 255);
	decoderConfigDescriptor.addByte((track.bandwidth & -16777216) >> 24);
	decoderConfigDescriptor.addByte(0 | (track.bandwidth & 16711680) >> 16);
	decoderConfigDescriptor.addByte(0 | (track.bandwidth & 65280) >> 8);
	decoderConfigDescriptor.addByte(0 | track.bandwidth & 255);
	var decoderSpecificInfoBytes = decoderSpecificInfo.getBytes();
	decoderConfigDescriptor.addBytes(decoderSpecificInfoBytes,0,decoderSpecificInfoBytes.length);
	var esdLength = 3 + decoderConfigDescriptor.pos;
	esDescriptor.addByte(3);
	esDescriptor.addByte(esdLength);
	esDescriptor.addByte((track.trackId & 65280) >> 8);
	esDescriptor.addByte(track.trackId & 255);
	esDescriptor.addByte(0);
	var decoderConfigDescriptorBytes = decoderConfigDescriptor.getBytes();
	esDescriptor.addBytes(decoderConfigDescriptorBytes,0,decoderConfigDescriptorBytes.length);
	return haxe_io__$UInt8Array_UInt8Array_$Impl_$.fromBytes(esDescriptor.getBytes());
};
Mp4lib.createMP4AudioSampleEntry = function(track) {
	var mp4a = null;
	if(track.contentProtection != null) {
		mp4a = new mp4lib_EncryptedAudioBox();
	} else {
		mp4a = new mp4lib_MP4AudioSampleEntryBox();
	}
	mp4a.reserved = [0,0,0,0,0,0];
	mp4a.data_reference_index = 1;
	mp4a.reserved_2 = [0,0];
	mp4a.channelcount = track.channels;
	mp4a.samplesize = 16;
	mp4a.pre_defined = 0;
	mp4a.reserved_3 = 0;
	mp4a.samplerate = track.samplingRate << 16;
	var esdBox = new mp4lib_ESDBox();
	var ES_Descriptor = Mp4lib.createMPEG4AACESDescriptor(track);
	esdBox.ES_tag = ES_Descriptor[0];
	esdBox.ES_length = ES_Descriptor[1];
	var length = ES_Descriptor.length;
	esdBox.ES_data = haxe_io__$UInt8Array_UInt8Array_$Impl_$.fromBytes(haxe_io_Bytes.ofData(new Uint8Array(ES_Descriptor.buffer.slice(2,length == null ? null : 2 + length)).buffer));
	esdBox.version = 0;
	esdBox.flags = 0;
	mp4a.boxes.push(esdBox);
	if(track.contentProtection != null) {
		mp4a.boxes.push(Mp4lib.createProtectionSchemeInfoBox(track));
	}
	return mp4a;
};
Mp4lib.createAVCVisualSampleEntry = function(track) {
	var avc1 = null;
	if(track.contentProtection != null) {
		avc1 = new mp4lib_EncryptedVideoBox();
	} else {
		avc1 = new mp4lib_AVC1VisualSampleEntryBox();
	}
	avc1.data_reference_index = 1;
	avc1.compressorname = "AVC Coding";
	avc1.depth = 24;
	avc1.reserved = [0,0,0,0,0,0];
	avc1.reserved_2 = 0;
	avc1.reserved_3 = 0;
	avc1.pre_defined = 0;
	avc1.pre_defined_2 = [0,0,0];
	avc1.pre_defined_3 = 65535;
	avc1.frame_count = 1;
	avc1.horizresolution = 4718592;
	avc1.vertresolution = 4718592;
	avc1.height = track.height;
	avc1.width = track.width;
	avc1.boxes.push(Mp4lib.createAVCConfigurationBox(track));
	if(track.contentProtection != null) {
		avc1.boxes.push(Mp4lib.createProtectionSchemeInfoBox(track));
	}
	return avc1;
};
Mp4lib.createProtectionSchemeInfoBox = function(track) {
	var sinf = new mp4lib_ProtectionSchemeInformationBox();
	sinf.boxes.push(Mp4lib.createOriginalFormatBox(track));
	sinf.boxes.push(Mp4lib.createSchemeTypeBox());
	sinf.boxes.push(Mp4lib.createSchemeInformationBox(track));
	return sinf;
};
Mp4lib.createSchemeInformationBox = function(track) {
	var schi = new mp4lib_SchemeInformationBox();
	schi.boxes.push(Mp4lib.createTrackEncryptionBox(track));
	return schi;
};
Mp4lib.createTrackEncryptionBox = function(track) {
	var tenc = new mp4lib_TrackEncryptionBox();
	tenc.flags = 0;
	tenc.version = 0;
	tenc.default_IsEncrypted = 1;
	tenc.default_IV_size = 8;
	tenc.default_KID = track.contentProtection && track.contentProtection.length > 0 && Object.prototype.hasOwnProperty.call(track.contentProtection[0],"cenc:default_KID") ? Reflect.field(track.contentProtection[0],"cenc:default_KID") : [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
	return tenc;
};
Mp4lib.createSchemeTypeBox = function() {
	var schm = new mp4lib_SchemeTypeBox();
	schm.flags = 0;
	schm.version = 0;
	schm.scheme_type = 1667591779;
	schm.scheme_version = 65536;
	return schm;
};
Mp4lib.createOriginalFormatBox = function(track) {
	var frma = new mp4lib_OriginalFormatBox();
	frma.data_format = Mp4lib.stringToCharCode(track.codecs.substring(0,track.codecs.indexOf(".")));
	return frma;
};
Mp4lib.createAVCConfigurationBox = function(track) {
	var NALBuffer;
	var regexpSPS = new EReg("^[A-Z0-9]7","gi");
	var regexpPPS = new EReg("^[A-Z0-9]8","gi");
	var avcC = new mp4lib_AVCConfigurationBox();
	avcC.configurationVersion = 1;
	avcC.lengthSizeMinusOne = 3;
	avcC.SPS_NAL = [];
	avcC.PPS_NAL = [];
	var this1 = new Uint8Array(0);
	var NALDatabuffer = this1;
	var codecPrivateData = track.codecPrivateData;
	var NALArray = codecPrivateData.split("00000001");
	NALArray.splice(0,1);
	var SPS_index = 0;
	var PPS_index = 0;
	var _g = 0;
	var _g1 = NALArray.length;
	while(_g < _g1) {
		var i = _g++;
		NALBuffer = Mp4lib.parseHexString(NALArray[i]);
		if(regexpSPS.match(NALArray[i])) {
			avcC.SPS_NAL[SPS_index++] = { "NAL_length" : NALBuffer.length, "NAL" : NALBuffer};
			avcC.AVCProfileIndication = Mp4lib.parseInt(HxOverrides.substr(NALArray[i],2,2),16);
			avcC.profile_compatibility = Mp4lib.parseInt(HxOverrides.substr(NALArray[i],4,2),16);
			avcC.AVCLevelIndication = Mp4lib.parseInt(HxOverrides.substr(NALArray[i],6,2),16);
		}
		if(regexpPPS.match(NALArray[i])) {
			avcC.PPS_NAL[PPS_index++] = { "NAL_length" : NALBuffer.length, "NAL" : NALBuffer};
		}
	}
	avcC.numOfSequenceParameterSets = SPS_index;
	avcC.numOfPictureParameterSets = PPS_index;
	return avcC;
};
Mp4lib.doSampleSizeBox = function() {
	var stsz = new mp4lib_SampleSizeBox();
	stsz.version = 0;
	stsz.flags = 0;
	stsz.sample_count = 0;
	stsz.sample_size = 0;
	return stsz;
};
Mp4lib.doChunkOffsetBox = function() {
	var stco = new mp4lib_ChunkOffsetBox();
	stco.version = 0;
	stco.entry_count = 0;
	stco.flags = 0;
	stco.chunk_offset = [];
	return stco;
};
Mp4lib.doSampleToChunkBox = function() {
	var stsc = new mp4lib_SampleToChunkBox();
	stsc.flags = 0;
	stsc.version = 0;
	stsc.entry_count = 0;
	stsc.entry = [];
	return stsc;
};
Mp4lib.doDecodingTimeToSampleBox = function() {
	var stts = new mp4lib_TimeToSampleBox();
	stts.version = 0;
	stts.entry_count = 0;
	stts.flags = 0;
	stts.entry = [];
	return stts;
};
Mp4lib.doDataInformationBox = function() {
	var dinf = new mp4lib_DataInformationBox();
	var dref = new mp4lib_DataReferenceBox();
	dref.version = 0;
	dref.entry_count = 1;
	dref.flags = 0;
	var url = new mp4lib_DataEntryUrlBox();
	url.location = "";
	url.version = 0;
	url.flags = 1;
	dref.boxes.push(url);
	dinf.boxes.push(dref);
	return dinf;
};
Mp4lib.doVideoMediaHeaderBox = function() {
	var vmhd = new mp4lib_VideoMediaHeaderBox();
	vmhd.version = 0;
	vmhd.flags = 1;
	vmhd.graphicsmode = 0;
	vmhd.opcolor = [0,0,0];
	return vmhd;
};
Mp4lib.doSoundMediaHeaderBox = function() {
	var smhd = new mp4lib_SoundMediaHeaderBox();
	smhd.version = 0;
	smhd.balance = 0;
	smhd.reserved = 0;
	smhd.flags = 1;
	return smhd;
};
Mp4lib.doHandlerReferenceBox = function(track) {
	var hdlr = new mp4lib_HandlerBox();
	hdlr.version = 0;
	hdlr.pre_defined = 0;
	switch(track.type) {
	case "audio":
		hdlr.handler_type = Mp4lib.stringToCharCode("soun");
		hdlr.name = "Audio Track";
		break;
	case "video":
		hdlr.handler_type = Mp4lib.stringToCharCode("vide");
		hdlr.name = "Video Track";
		break;
	default:
		hdlr.handler_type = Mp4lib.stringToCharCode("meta");
		hdlr.name = "Text Track";
	}
	hdlr.name += String.fromCodePoint(0);
	hdlr.reserved = [0,0,0];
	hdlr.flags = 0;
	return hdlr;
};
Mp4lib.doMediaHeaderBox = function(track) {
	var mdhd = new mp4lib_MediaHeaderBox();
	mdhd.flags = 0;
	mdhd.version = 1;
	var this1 = new haxe__$Int64__$_$_$Int64(0,0);
	mdhd.creation_time = this1;
	var this2 = new haxe__$Int64__$_$_$Int64(0,0);
	mdhd.modification_time = this2;
	mdhd.timescale = track.timescale;
	var x = track.duration;
	var a_high = x >> 31;
	var a_low = x;
	var x1 = track.timescale;
	var b_high = x1 >> 31;
	var b_low = x1;
	var mask = 65535;
	var al = a_low & mask;
	var ah = a_low >>> 16;
	var bl = b_low & mask;
	var bh = b_low >>> 16;
	var p00 = haxe__$Int32_Int32_$Impl_$._mul(al,bl);
	var p10 = haxe__$Int32_Int32_$Impl_$._mul(ah,bl);
	var p01 = haxe__$Int32_Int32_$Impl_$._mul(al,bh);
	var p11 = haxe__$Int32_Int32_$Impl_$._mul(ah,bh);
	var low = p00;
	var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
	p01 = p01 << 16;
	low = low + p01 | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p01) < 0) {
		var ret = high++;
		high = high | 0;
	}
	p10 = p10 << 16;
	low = low + p10 | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p10) < 0) {
		var ret1 = high++;
		high = high | 0;
	}
	high = high + (haxe__$Int32_Int32_$Impl_$._mul(a_low,b_high) + haxe__$Int32_Int32_$Impl_$._mul(a_high,b_low) | 0) | 0;
	var this3 = new haxe__$Int64__$_$_$Int64(high,low);
	mdhd.duration = this3;
	mdhd.pad = 0;
	mdhd.language = Mp4lib.getLanguageCode(track.language);
	mdhd.pre_defined = 0;
	return mdhd;
};
Mp4lib.stringToCharCode = function(str) {
	var code = 0;
	var _g = 0;
	var _g1 = str.length;
	while(_g < _g1) {
		var i = _g++;
		code |= HxOverrides.cca(str,i) << (str.length - i - 1) * 8;
	}
	return code;
};
Mp4lib.getLanguageCode = function(language) {
	var result = 0;
	var firstLetterCode = HxOverrides.cca(language,0) - 96 << 10;
	var secondLetterCode = HxOverrides.cca(language,1) - 96 << 5;
	var thirdLetterCode = HxOverrides.cca(language,2) - 96;
	result = firstLetterCode | secondLetterCode | thirdLetterCode;
	return result;
};
Mp4lib.parseInt = function(stringValue,radix) {
	if(HxOverrides.substr(stringValue,0,1) == "-") {
		return -Mp4lib.parseInt(HxOverrides.substr(stringValue,1,null),radix);
	}
	var value = 0;
	var _g = 0;
	var _g1 = stringValue.length;
	while(_g < _g1) {
		var n = _g++;
		var charCode = HxOverrides.cca(stringValue,n);
		value *= radix;
		if(charCode >= HxOverrides.cca("0",0) && charCode <= HxOverrides.cca("9",0)) {
			value += charCode - HxOverrides.cca("0",0);
		} else if(charCode >= HxOverrides.cca("a",0) && charCode <= HxOverrides.cca("z",0)) {
			value += charCode - HxOverrides.cca("a",0) + 10;
		} else if(charCode >= HxOverrides.cca("A",0) && charCode <= HxOverrides.cca("Z",0)) {
			value += charCode - HxOverrides.cca("A",0) + 10;
		}
	}
	return value;
};
Mp4lib.parseHexString = function(str) {
	return haxe_io__$UInt8Array_UInt8Array_$Impl_$.fromBytes(Mp4lib.base16_decoder.decodeBytes(haxe_io_Bytes.ofString(str.toLowerCase())));
};
Mp4lib.searchBox = function(boxtype,uuid) {
	var boxType;
	if(uuid != null) {
		var _this = Mp4lib.boxTypeArray;
		boxType = __map_reserved[uuid] != null ? _this.getReserved(uuid) : _this.h[uuid];
	} else {
		var _this1 = Mp4lib.boxTypeArray;
		boxType = __map_reserved[boxtype] != null ? _this1.getReserved(boxtype) : _this1.h[boxtype];
	}
	if(!boxType) {
		boxType = mp4lib_UnknownBox;
	}
	return boxType;
};
Mp4lib.createBox = function(boxtype,size,uuid) {
	return Type.createInstance(Mp4lib.searchBox(boxtype,uuid),[size]);
};
Mp4lib.deserialize = function(data) {
	var f = new mp4lib_File();
	try {
		f.read(data);
	} catch( e ) {
		throw js__$Boot_HaxeError.wrap(((e) instanceof js__$Boot_HaxeError) ? e.val : e);
	}
	return f;
};
Mp4lib.main = function() {
};
Mp4lib.serialize = function(atom) {
	var this1 = new Uint8Array(atom.getLength());
	var retval = this1;
	atom.write(retval,null,null);
	return retval;
};
var Mp4Track = function() {
	this.data = null;
	this.samples = [];
	this.contentProtection = null;
	this.samplingRate = 0;
	this.channels = 0;
	this.language = "und";
	this.height = 0;
	this.width = 0;
	this.bandwidth = 0;
	this.codecPrivateData = "";
	this.codecs = "";
	this.duration = 0;
	this.timescale = 0;
	this.trackId = 0;
	this.type = "und";
};
Mp4Track.__name__ = true;
var Mp4TrackSample = function() {
	this.size = 0;
	this.data = null;
	this.flags = 0;
	this.duration = 0;
	this.cts = 0;
	this.dts = 0;
};
Mp4TrackSample.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		return null;
	}
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var c = _g_s.charCodeAt(_g_offset++);
		if(c >= 55296 && c < 56319) {
			c = c - 55232 << 10 | _g_s.charCodeAt(_g_offset++) & 1023;
		}
		var code = c;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.htmlUnescape = function(s) {
	return s.split("&gt;").join(">").split("&lt;").join("<").split("&quot;").join("\"").split("&#039;").join("'").split("&amp;").join("&");
};
var Type = function() { };
Type.__name__ = true;
Type.createInstance = function(cl,args) {
	return new (Function.prototype.bind.apply(cl,[null].concat(args)));
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe__$Int32_Int32_$Impl_$ = {};
haxe__$Int32_Int32_$Impl_$.__name__ = true;
haxe__$Int32_Int32_$Impl_$.ucompare = function(a,b) {
	if(a < 0) {
		if(b < 0) {
			return ~b - ~a | 0;
		} else {
			return 1;
		}
	}
	if(b < 0) {
		return -1;
	} else {
		return a - b | 0;
	}
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
haxe__$Int64__$_$_$Int64.__name__ = true;
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
};
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
haxe_io_BytesBuffer.__name__ = true;
haxe_io_BytesBuffer.prototype = {
	addByte: function(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	,addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var haxe_io__$UInt8Array_UInt8Array_$Impl_$ = {};
haxe_io__$UInt8Array_UInt8Array_$Impl_$.__name__ = true;
haxe_io__$UInt8Array_UInt8Array_$Impl_$.fromArray = function(a,pos,length) {
	if(pos == null) {
		pos = 0;
	}
	if(length == null) {
		length = a.length - pos;
	}
	if(pos < 0 || length < 0 || pos + length > a.length) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	if(pos == 0 && length == a.length) {
		return new Uint8Array(a);
	}
	var this1 = new Uint8Array(a.length);
	var i = this1;
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		var idx = _g++;
		i[idx] = a[idx + pos] & 255;
	}
	return i;
};
haxe_io__$UInt8Array_UInt8Array_$Impl_$.fromBytes = function(bytes,bytePos,length) {
	if(bytePos == null) {
		bytePos = 0;
	}
	if(length == null) {
		length = bytes.length - bytePos;
	}
	return new Uint8Array(bytes.b.bufferValue,bytePos,length);
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if(((val) instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s += "\t";
				var tmp = n + "(";
				var _g = [];
				var _g1 = 0;
				var _g2 = con.__params__;
				while(_g1 < _g2.length) {
					var p = _g2[_g1];
					++_g1;
					_g.push(js_Boot.__string_rec(o[p],s));
				}
				return tmp + _g.join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var l = o.length;
			var i;
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = l;
			while(_g3 < _g11) {
				var i1 = _g3++;
				str += (i1 > 0 ? "," : "") + js_Boot.__string_rec(o[i1],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var js_html__$ArrayBuffer_ArrayBufferCompat = function() { };
js_html__$ArrayBuffer_ArrayBufferCompat.__name__ = true;
js_html__$ArrayBuffer_ArrayBufferCompat.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var resultArray = new Uint8Array(u.byteLength);
	resultArray.set(u);
	return resultArray.buffer;
};
var mp4lib_fields_IField = function() { };
mp4lib_fields_IField.__name__ = true;
var mp4lib_fields_NumberField = function(bits,signed) {
	this.bits = bits;
	this.nbytes = Math.floor(this.bits / 8);
	this.signed = signed;
};
mp4lib_fields_NumberField.__name__ = true;
mp4lib_fields_NumberField.__interfaces__ = [mp4lib_fields_IField];
mp4lib_fields_NumberField.prototype = {
	read: function(buf,pos,end) {
		return mp4lib_Fields.readBytes(buf,pos,this.nbytes);
	}
	,write: function(buf,pos,val) {
		return mp4lib_Fields.writeBytes(buf,pos,this.nbytes,val);
	}
	,getLength: function(val) {
		return Math.floor(this.bits / 8);
	}
};
var mp4lib_fields_BoxTypeField = function() {
};
mp4lib_fields_BoxTypeField.__name__ = true;
mp4lib_fields_BoxTypeField.__interfaces__ = [mp4lib_fields_IField];
mp4lib_fields_BoxTypeField.prototype = {
	read: function(buf,pos,end) {
		var res = "";
		res += String.fromCodePoint(buf[pos]);
		res += String.fromCodePoint(buf[pos + 1]);
		res += String.fromCodePoint(buf[pos + 2]);
		res += String.fromCodePoint(buf[pos + 3]);
		return res;
	}
	,write: function(buf,pos,val) {
		var i = 0;
		buf[pos] = HxOverrides.cca(val,0) & 255;
		buf[pos + 1] = HxOverrides.cca(val,1) & 255;
		buf[pos + 2] = HxOverrides.cca(val,2) & 255;
		buf[pos + 3] = HxOverrides.cca(val,3) & 255;
		return val.length;
	}
	,getLength: function(val) {
		return 4;
	}
};
var mp4lib_fields_LongNumberField = function() {
};
mp4lib_fields_LongNumberField.__name__ = true;
mp4lib_fields_LongNumberField.__interfaces__ = [mp4lib_fields_IField];
mp4lib_fields_LongNumberField.prototype = {
	read: function(buf,pos,end) {
		var high = mp4lib_Fields.readBytes(buf,pos,4);
		var low = mp4lib_Fields.readBytes(buf,pos + 4,4);
		var this1 = new haxe__$Int64__$_$_$Int64(high,low);
		return this1;
	}
	,write: function(buf,pos,val) {
		mp4lib_Fields.writeBytes(buf,pos,4,val.high);
		mp4lib_Fields.writeBytes(buf,pos + 4,4,val.low);
		return 8;
	}
	,getLength: function(val) {
		return 8;
	}
};
var mp4lib_fields_StringField = function(utf8) {
	if(utf8 == null) {
		utf8 = false;
	}
	this.utf8 = false;
	this.utf8 = utf8;
};
mp4lib_fields_StringField.__name__ = true;
mp4lib_fields_StringField.__interfaces__ = [mp4lib_fields_IField];
mp4lib_fields_StringField.prototype = {
	read: function(buf,pos,end) {
		if(this.utf8) {
			var length = end - pos;
			return mp4lib_utils_Utils.fromUtf8(buf.subarray(pos,length == null ? buf.length : pos + length));
		} else {
			var res = "";
			var _g = pos;
			var _g1 = end;
			while(_g < _g1) {
				var i = _g++;
				res += String.fromCodePoint(buf[i]);
				if(buf[i] == 0) {
					return res;
				}
			}
			if(end - pos < 255 && haxe_io_Bytes.ofData(buf.buffer).getString(0,1) == String.fromCodePoint(end - pos)) {
				res = HxOverrides.substr(res,1,end - pos);
				return res;
			}
			throw new js__$Boot_HaxeError("expected null-terminated string, " + "but end of field reached without termination. " + "Read so far:\"" + res + "\"");
		}
	}
	,write: function(buf,pos,val) {
		if(this.utf8) {
			var encoded = mp4lib_utils_Utils.toUtf8(val);
			var _g = 0;
			var _g1 = encoded.length;
			while(_g < _g1) {
				var i = _g++;
				buf[pos + i] = encoded[i] & 255;
			}
		} else {
			var _g2 = 0;
			var _g11 = val.length;
			while(_g2 < _g11) {
				var i1 = _g2++;
				buf[pos + i1] = HxOverrides.cca(val,i1) & 255;
			}
			buf[pos + val.length] = 0;
		}
		return val.length;
	}
	,getLength: function(val) {
		if(val != null && Object.prototype.hasOwnProperty.call(val,"length")) {
			return val.length;
		} else {
			return 0;
		}
	}
};
var mp4lib_Fields = function() { };
mp4lib_Fields.__name__ = true;
mp4lib_Fields.readBytes = function(buf,pos,nbBytes) {
	var value = 0;
	var _g = 0;
	var _g1 = nbBytes;
	while(_g < _g1) {
		var i = _g++;
		value <<= 8;
		value += buf[pos];
		++pos;
	}
	return value;
};
mp4lib_Fields.writeBytes = function(buf,pos,nbBytes,value) {
	var _g = 0;
	var _g1 = nbBytes;
	while(_g < _g1) {
		var i = _g++;
		buf[pos + nbBytes - i - 1] = value & 255 & 255;
		value >>= 8;
	}
	return nbBytes;
};
mp4lib_Fields.readString = function(buf,pos,len) {
	return haxe_io_Bytes.ofData(buf.buffer).getString(pos,len);
};
var mp4lib_File = function() {
	this.boxes = null;
	this.boxes = [];
};
mp4lib_File.__name__ = true;
mp4lib_File.prototype = {
	getBoxByType: function(boxType) {
		var _g = 0;
		var _g1 = this.boxes;
		while(_g < _g1.length) {
			var box = _g1[_g];
			++_g;
			if(box.boxtype == boxType) {
				return box;
			}
		}
		return null;
	}
	,findBoxByType: function(boxType) {
		var walk = null;
		walk = function(boxes) {
			var _g = 0;
			while(_g < boxes.length) {
				var box = boxes[_g];
				++_g;
				if(box.boxtype == boxType) {
					return box;
				} else if(Object.prototype.hasOwnProperty.call(box,"boxes")) {
					var res = walk(Reflect.field(box,"boxes"));
					if(res != null) {
						return res;
					}
				}
			}
			return null;
		};
		return walk(this.boxes);
	}
	,getLength: function() {
		var length = 0;
		var _g = 0;
		var _g1 = this.boxes;
		while(_g < _g1.length) {
			var box = _g1[_g];
			++_g;
			box.computeLength();
			length += box.size;
		}
		return length;
	}
	,write: function(data) {
		var pos = 0;
		var _g = 0;
		var _g1 = this.boxes.length;
		while(_g < _g1) {
			var i = _g++;
			pos = this.boxes[i].write(data,pos);
		}
	}
	,read: function(data) {
		var size = 0;
		var boxtype = null;
		var uuidFieldPos = 0;
		var uuid = null;
		var pos = 0;
		var end = data.length;
		var box;
		while(pos < end) {
			size = mp4lib_Fields.FIELD_UINT32.read(data,pos);
			boxtype = mp4lib_Fields.readString(data,pos + 4,4);
			if(boxtype == "uuid") {
				uuidFieldPos = size == 1 ? 16 : 8;
				uuid = new mp4lib_fields_ArrayField(mp4lib_Fields.FIELD_INT8,16).read(data,pos + uuidFieldPos,pos + uuidFieldPos + 16);
				uuid = JSON.stringify(uuid);
			}
			box = Mp4lib.createBox(boxtype,size,uuid);
			if(boxtype == "uuid") {
				pos = box.read(data,pos + mp4lib_Fields.FIELD_INT8.getLength() * 16 + 8,pos + size);
				uuid = null;
			} else {
				pos = box.read(data,pos + 8,pos + size);
			}
			if(box.boxtype != null) {
				this.boxes.push(box);
			}
			if(box.size <= 0 || box.size == null) {
				throw new js__$Boot_HaxeError("Problem on size of box " + box.boxtype + ", parsing stopped to avoid infinite loop");
			}
		}
	}
};
var mp4lib_UnknownBox = function(size) {
	mp4lib_Box.call(this,null,size);
};
mp4lib_UnknownBox.__name__ = true;
mp4lib_UnknownBox.__super__ = mp4lib_Box;
mp4lib_UnknownBox.prototype = $extend(mp4lib_Box.prototype,{
	read: function(buf,pos,end) {
		this.localPos = pos;
		this.localEnd = end;
		var begin = this.localPos;
		var length = this.localEnd;
		this.unrecognized_data = haxe_io__$UInt8Array_UInt8Array_$Impl_$.fromBytes(haxe_io_Bytes.ofData(new Uint8Array(buf.buffer.slice(begin,length == null ? null : begin + length)).buffer));
		return this.localEnd;
	}
	,write: function(data,pos) {
		mp4lib_Box.prototype.write.call(this,data,pos);
		this._writeBuffer(data,this.unrecognized_data,this.unrecognized_data.length);
		return this.localPos;
	}
	,computeLength: function() {
		mp4lib_Box.prototype.computeLength.call(this);
		this.size += this.unrecognized_data.length;
	}
});
var mp4lib_fields_ArrayField = function(innerField,size) {
	this.innerField = innerField;
	this.size = size;
};
mp4lib_fields_ArrayField.__name__ = true;
mp4lib_fields_ArrayField.__interfaces__ = [mp4lib_fields_IField];
mp4lib_fields_ArrayField.prototype = {
	read: function(buf,pos,end) {
		var innerFieldLength = -1;
		var res = [];
		var _g = 0;
		var _g1 = this.size;
		while(_g < _g1) {
			var i = _g++;
			res.push(this.innerField.read(buf,pos));
			if(innerFieldLength == -1) {
				innerFieldLength = this.innerField.getLength(res[i]);
			}
			pos += innerFieldLength;
		}
		return res;
	}
	,write: function(buf,pos,val) {
		throw new js__$Boot_HaxeError("not implemented");
	}
	,getLength: function(val) {
		throw new js__$Boot_HaxeError("not implemented");
	}
};
var mp4lib_fields_FixedLenStringField = function(size) {
	this.size = 0;
	this.size = size;
};
mp4lib_fields_FixedLenStringField.__name__ = true;
mp4lib_fields_FixedLenStringField.__interfaces__ = [mp4lib_fields_IField];
mp4lib_fields_FixedLenStringField.prototype = {
	read: function(buf,pos,end) {
		return haxe_io_Bytes.ofData(buf.buffer).getString(pos,this.size);
	}
	,write: function(buf,pos,val) {
		var _g = 0;
		var _g1 = this.size;
		while(_g < _g1) {
			var i = _g++;
			buf[pos + i] = HxOverrides.cca(val,i) & 255;
		}
		return this.size;
	}
	,getLength: function(val) {
		return this.size;
	}
};
var mp4lib_utils_Utils = function() { };
mp4lib_utils_Utils.__name__ = true;
mp4lib_utils_Utils.fromUtf8 = function(data) {
	if(data == null) {
		return "";
	}
	if(data[0] == 239 && data[1] == 187 && data[2] == 191) {
		data = data.subarray(3,null);
	}
	var ret = "";
	var _g = 0;
	var _g1 = data.length;
	while(_g < _g1) {
		var i = _g++;
		ret += String.fromCodePoint(data[i]);
	}
	var escaped = StringTools.htmlEscape(ret);
	try {
		escaped = decodeURIComponent(escaped.split("+").join(" "));
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		throw new js__$Boot_HaxeError("mp4 box parser encountered bad bad string encoding");
	}
	return escaped;
};
mp4lib_utils_Utils.toUtf8 = function(str) {
	var encoded = encodeURIComponent(str);
	var utf8 = StringTools.htmlUnescape(encoded);
	var this1 = new Uint8Array(utf8.length);
	var result = this1;
	var _g = 0;
	var _g1 = utf8.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = HxOverrides.cca(utf8,i) & 255;
	}
	return result;
};
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.__name__ = true;
Array.__name__ = true;
var __map_reserved = {};
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html__$ArrayBuffer_ArrayBufferCompat.sliceImpl;
}
mp4lib_HandlerBox.HANDLERTYPEVIDEO = "vide";
mp4lib_HandlerBox.HANDLERTYPEAUDIO = "soun";
mp4lib_HandlerBox.HANDLERTYPETEXT = "meta";
mp4lib_HandlerBox.HANDLERVIDEONAME = "Video Track";
mp4lib_HandlerBox.HANDLERAUDIONAME = "Audio Track";
mp4lib_HandlerBox.HANDLERTEXTNAME = "Text Track";
Mp4lib.boxTypeArray = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var value = mp4lib_MovieBox;
		if(__map_reserved["moov"] != null) {
			_g.setReserved("moov",value);
		} else {
			_g.h["moov"] = value;
		}
	}
	{
		var value1 = mp4lib_MovieFragmentBox;
		if(__map_reserved["moof"] != null) {
			_g.setReserved("moof",value1);
		} else {
			_g.h["moof"] = value1;
		}
	}
	{
		var value2 = mp4lib_FileTypeBox;
		if(__map_reserved["ftyp"] != null) {
			_g.setReserved("ftyp",value2);
		} else {
			_g.h["ftyp"] = value2;
		}
	}
	{
		var value3 = mp4lib_MovieFragmentHeaderBox;
		if(__map_reserved["mfhd"] != null) {
			_g.setReserved("mfhd",value3);
		} else {
			_g.h["mfhd"] = value3;
		}
	}
	{
		var value4 = mp4lib_MovieFragmentRandomAccessBox;
		if(__map_reserved["mfra"] != null) {
			_g.setReserved("mfra",value4);
		} else {
			_g.h["mfra"] = value4;
		}
	}
	{
		var value5 = mp4lib_UserDataBox;
		if(__map_reserved["udta"] != null) {
			_g.setReserved("udta",value5);
		} else {
			_g.h["udta"] = value5;
		}
	}
	{
		var value6 = mp4lib_TrackBox;
		if(__map_reserved["trak"] != null) {
			_g.setReserved("trak",value6);
		} else {
			_g.h["trak"] = value6;
		}
	}
	{
		var value7 = mp4lib_EditBox;
		if(__map_reserved["edts"] != null) {
			_g.setReserved("edts",value7);
		} else {
			_g.h["edts"] = value7;
		}
	}
	{
		var value8 = mp4lib_MediaBox;
		if(__map_reserved["mdia"] != null) {
			_g.setReserved("mdia",value8);
		} else {
			_g.h["mdia"] = value8;
		}
	}
	{
		var value9 = mp4lib_MediaInformationBox;
		if(__map_reserved["minf"] != null) {
			_g.setReserved("minf",value9);
		} else {
			_g.h["minf"] = value9;
		}
	}
	{
		var value10 = mp4lib_DataInformationBox;
		if(__map_reserved["dinf"] != null) {
			_g.setReserved("dinf",value10);
		} else {
			_g.h["dinf"] = value10;
		}
	}
	{
		var value11 = mp4lib_SampleTableBox;
		if(__map_reserved["stbl"] != null) {
			_g.setReserved("stbl",value11);
		} else {
			_g.h["stbl"] = value11;
		}
	}
	{
		var value12 = mp4lib_MovieExtendsBox;
		if(__map_reserved["mvex"] != null) {
			_g.setReserved("mvex",value12);
		} else {
			_g.h["mvex"] = value12;
		}
	}
	{
		var value13 = mp4lib_TrackFragmentBox;
		if(__map_reserved["traf"] != null) {
			_g.setReserved("traf",value13);
		} else {
			_g.h["traf"] = value13;
		}
	}
	{
		var value14 = mp4lib_MetaBox;
		if(__map_reserved["meta"] != null) {
			_g.setReserved("meta",value14);
		} else {
			_g.h["meta"] = value14;
		}
	}
	{
		var value15 = mp4lib_MovieHeaderBox;
		if(__map_reserved["mvhd"] != null) {
			_g.setReserved("mvhd",value15);
		} else {
			_g.h["mvhd"] = value15;
		}
	}
	{
		var value16 = mp4lib_MediaDataBox;
		if(__map_reserved["mdat"] != null) {
			_g.setReserved("mdat",value16);
		} else {
			_g.h["mdat"] = value16;
		}
	}
	{
		var value17 = mp4lib_FreeSpaceBox;
		if(__map_reserved["free"] != null) {
			_g.setReserved("free",value17);
		} else {
			_g.h["free"] = value17;
		}
	}
	{
		var value18 = mp4lib_SegmentIndexBox;
		if(__map_reserved["sidx"] != null) {
			_g.setReserved("sidx",value18);
		} else {
			_g.h["sidx"] = value18;
		}
	}
	{
		var value19 = mp4lib_TrackHeaderBox;
		if(__map_reserved["tkhd"] != null) {
			_g.setReserved("tkhd",value19);
		} else {
			_g.h["tkhd"] = value19;
		}
	}
	{
		var value20 = mp4lib_MediaHeaderBox;
		if(__map_reserved["mdhd"] != null) {
			_g.setReserved("mdhd",value20);
		} else {
			_g.h["mdhd"] = value20;
		}
	}
	{
		var value21 = mp4lib_MovieExtendsHeaderBox;
		if(__map_reserved["mehd"] != null) {
			_g.setReserved("mehd",value21);
		} else {
			_g.h["mehd"] = value21;
		}
	}
	{
		var value22 = mp4lib_HandlerBox;
		if(__map_reserved["hdlr"] != null) {
			_g.setReserved("hdlr",value22);
		} else {
			_g.h["hdlr"] = value22;
		}
	}
	{
		var value23 = mp4lib_TimeToSampleBox;
		if(__map_reserved["stts"] != null) {
			_g.setReserved("stts",value23);
		} else {
			_g.h["stts"] = value23;
		}
	}
	{
		var value24 = mp4lib_SampleToChunkBox;
		if(__map_reserved["stsc"] != null) {
			_g.setReserved("stsc",value24);
		} else {
			_g.h["stsc"] = value24;
		}
	}
	{
		var value25 = mp4lib_ChunkOffsetBox;
		if(__map_reserved["stco"] != null) {
			_g.setReserved("stco",value25);
		} else {
			_g.h["stco"] = value25;
		}
	}
	{
		var value26 = mp4lib_TrackExtendsBox;
		if(__map_reserved["trex"] != null) {
			_g.setReserved("trex",value26);
		} else {
			_g.h["trex"] = value26;
		}
	}
	{
		var value27 = mp4lib_VideoMediaHeaderBox;
		if(__map_reserved["vmhd"] != null) {
			_g.setReserved("vmhd",value27);
		} else {
			_g.h["vmhd"] = value27;
		}
	}
	{
		var value28 = mp4lib_SoundMediaHeaderBox;
		if(__map_reserved["smhd"] != null) {
			_g.setReserved("smhd",value28);
		} else {
			_g.h["smhd"] = value28;
		}
	}
	{
		var value29 = mp4lib_DataReferenceBox;
		if(__map_reserved["dref"] != null) {
			_g.setReserved("dref",value29);
		} else {
			_g.h["dref"] = value29;
		}
	}
	{
		var value30 = mp4lib_DataEntryUrlBox;
		if(__map_reserved["url "] != null) {
			_g.setReserved("url ",value30);
		} else {
			_g.h["url "] = value30;
		}
	}
	{
		var value31 = mp4lib_DataEntryUrnBox;
		if(__map_reserved["urn "] != null) {
			_g.setReserved("urn ",value31);
		} else {
			_g.h["urn "] = value31;
		}
	}
	{
		var value32 = mp4lib_TrackFragmentHeaderBox;
		if(__map_reserved["tfhd"] != null) {
			_g.setReserved("tfhd",value32);
		} else {
			_g.h["tfhd"] = value32;
		}
	}
	{
		var value33 = mp4lib_TrackFragmentBaseMediaDecodeTimeBox;
		if(__map_reserved["tfdt"] != null) {
			_g.setReserved("tfdt",value33);
		} else {
			_g.h["tfdt"] = value33;
		}
	}
	{
		var value34 = mp4lib_TrackFragmentRunBox;
		if(__map_reserved["trun"] != null) {
			_g.setReserved("trun",value34);
		} else {
			_g.h["trun"] = value34;
		}
	}
	{
		var value35 = mp4lib_SampleDescriptionBox;
		if(__map_reserved["stsd"] != null) {
			_g.setReserved("stsd",value35);
		} else {
			_g.h["stsd"] = value35;
		}
	}
	{
		var value36 = mp4lib_SampleDependencyTableBox;
		if(__map_reserved["sdtp"] != null) {
			_g.setReserved("sdtp",value36);
		} else {
			_g.h["sdtp"] = value36;
		}
	}
	{
		var value37 = mp4lib_AVC1VisualSampleEntryBox;
		if(__map_reserved["avc1"] != null) {
			_g.setReserved("avc1",value37);
		} else {
			_g.h["avc1"] = value37;
		}
	}
	{
		var value38 = mp4lib_EncryptedVideoBox;
		if(__map_reserved["encv"] != null) {
			_g.setReserved("encv",value38);
		} else {
			_g.h["encv"] = value38;
		}
	}
	{
		var value39 = mp4lib_AVCConfigurationBox;
		if(__map_reserved["avcC"] != null) {
			_g.setReserved("avcC",value39);
		} else {
			_g.h["avcC"] = value39;
		}
	}
	{
		var value40 = mp4lib_PixelAspectRatioBox;
		if(__map_reserved["pasp"] != null) {
			_g.setReserved("pasp",value40);
		} else {
			_g.h["pasp"] = value40;
		}
	}
	{
		var value41 = mp4lib_MP4AudioSampleEntryBox;
		if(__map_reserved["mp4a"] != null) {
			_g.setReserved("mp4a",value41);
		} else {
			_g.h["mp4a"] = value41;
		}
	}
	{
		var value42 = mp4lib_EncryptedAudioBox;
		if(__map_reserved["enca"] != null) {
			_g.setReserved("enca",value42);
		} else {
			_g.h["enca"] = value42;
		}
	}
	{
		var value43 = mp4lib_ESDBox;
		if(__map_reserved["esds"] != null) {
			_g.setReserved("esds",value43);
		} else {
			_g.h["esds"] = value43;
		}
	}
	{
		var value44 = mp4lib_SampleSizeBox;
		if(__map_reserved["stsz"] != null) {
			_g.setReserved("stsz",value44);
		} else {
			_g.h["stsz"] = value44;
		}
	}
	{
		var value45 = mp4lib_ProtectionSystemSpecificHeaderBox;
		if(__map_reserved["pssh"] != null) {
			_g.setReserved("pssh",value45);
		} else {
			_g.h["pssh"] = value45;
		}
	}
	{
		var value46 = mp4lib_SampleAuxiliaryInformationSizesBox;
		if(__map_reserved["saiz"] != null) {
			_g.setReserved("saiz",value46);
		} else {
			_g.h["saiz"] = value46;
		}
	}
	{
		var value47 = mp4lib_SampleAuxiliaryInformationOffsetsBox;
		if(__map_reserved["saio"] != null) {
			_g.setReserved("saio",value47);
		} else {
			_g.h["saio"] = value47;
		}
	}
	{
		var value48 = mp4lib_ProtectionSchemeInformationBox;
		if(__map_reserved["sinf"] != null) {
			_g.setReserved("sinf",value48);
		} else {
			_g.h["sinf"] = value48;
		}
	}
	{
		var value49 = mp4lib_SchemeInformationBox;
		if(__map_reserved["schi"] != null) {
			_g.setReserved("schi",value49);
		} else {
			_g.h["schi"] = value49;
		}
	}
	{
		var value50 = mp4lib_TrackEncryptionBox;
		if(__map_reserved["tenc"] != null) {
			_g.setReserved("tenc",value50);
		} else {
			_g.h["tenc"] = value50;
		}
	}
	{
		var value51 = mp4lib_SchemeTypeBox;
		if(__map_reserved["schm"] != null) {
			_g.setReserved("schm",value51);
		} else {
			_g.h["schm"] = value51;
		}
	}
	{
		var value52 = mp4lib_EditListBox;
		if(__map_reserved["elst"] != null) {
			_g.setReserved("elst",value52);
		} else {
			_g.h["elst"] = value52;
		}
	}
	{
		var value53 = mp4lib_HintMediaHeaderBox;
		if(__map_reserved["hmhd"] != null) {
			_g.setReserved("hmhd",value53);
		} else {
			_g.h["hmhd"] = value53;
		}
	}
	{
		var value54 = mp4lib_NullMediaHeaderBox;
		if(__map_reserved["nmhd"] != null) {
			_g.setReserved("nmhd",value54);
		} else {
			_g.h["nmhd"] = value54;
		}
	}
	{
		var value55 = mp4lib_CompositionOffsetBox;
		if(__map_reserved["ctts"] != null) {
			_g.setReserved("ctts",value55);
		} else {
			_g.h["ctts"] = value55;
		}
	}
	{
		var value56 = mp4lib_CompositionToDecodeBox;
		if(__map_reserved["cslg"] != null) {
			_g.setReserved("cslg",value56);
		} else {
			_g.h["cslg"] = value56;
		}
	}
	{
		var value57 = mp4lib_SyncSampleBox;
		if(__map_reserved["stss"] != null) {
			_g.setReserved("stss",value57);
		} else {
			_g.h["stss"] = value57;
		}
	}
	{
		var value58 = mp4lib_TrackReferenceBox;
		if(__map_reserved["tref"] != null) {
			_g.setReserved("tref",value58);
		} else {
			_g.h["tref"] = value58;
		}
	}
	{
		var value59 = mp4lib_OriginalFormatBox;
		if(__map_reserved["frma"] != null) {
			_g.setReserved("frma",value59);
		} else {
			_g.h["frma"] = value59;
		}
	}
	{
		var value60 = mp4lib_SubtitleSampleEntry;
		if(__map_reserved["stpp"] != null) {
			_g.setReserved("stpp",value60);
		} else {
			_g.h["stpp"] = value60;
		}
	}
	{
		var value61 = mp4lib_DASHEventMessageBox;
		if(__map_reserved["emsg"] != null) {
			_g.setReserved("emsg",value61);
		} else {
			_g.h["emsg"] = value61;
		}
	}
	{
		var value62 = mp4lib_MPEG4BitRateBox;
		if(__map_reserved["btrt"] != null) {
			_g.setReserved("btrt",value62);
		} else {
			_g.h["btrt"] = value62;
		}
	}
	{
		var key = JSON.stringify([109,29,155,5,66,213,68,230,128,226,20,29,175,247,87,178]);
		var value63 = mp4lib_TfxdBox;
		if(__map_reserved[key] != null) {
			_g.setReserved(key,value63);
		} else {
			_g.h[key] = value63;
		}
	}
	{
		var key1 = JSON.stringify([212,128,126,242,202,57,70,149,142,84,38,203,158,70,167,159]);
		var value64 = mp4lib_TfrfBox;
		if(__map_reserved[key1] != null) {
			_g.setReserved(key1,value64);
		} else {
			_g.h[key1] = value64;
		}
	}
	{
		var key2 = JSON.stringify([208,138,79,24,16,243,74,130,182,200,50,216,171,161,131,211]);
		var value65 = mp4lib_PiffProtectionSystemSpecificHeaderBox;
		if(__map_reserved[key2] != null) {
			_g.setReserved(key2,value65);
		} else {
			_g.h[key2] = value65;
		}
	}
	{
		var key3 = JSON.stringify([137,116,219,206,123,231,76,81,132,249,113,72,249,136,37,84]);
		var value66 = mp4lib_PiffTrackEncryptionBox;
		if(__map_reserved[key3] != null) {
			_g.setReserved(key3,value66);
		} else {
			_g.h[key3] = value66;
		}
	}
	{
		var key4 = JSON.stringify([162,57,79,82,90,155,79,20,162,68,108,66,124,100,141,244]);
		var value67 = mp4lib_PiffSampleEncryptionBox;
		if(__map_reserved[key4] != null) {
			_g.setReserved(key4,value67);
		} else {
			_g.h[key4] = value67;
		}
	}
	$r = _g;
	return $r;
}(this));
Mp4lib.base16_decoder = new haxe_crypto_BaseCode(haxe_io_Bytes.ofString("0123456789abcdef"));
haxe__$Int32_Int32_$Impl_$._mul = Math.imul != null ? Math.imul : function(a,b) {
	return a * (b & 65535) + (a * (b >>> 16) << 16 | 0) | 0;
};
mp4lib_Fields.FIELD_INT8 = new mp4lib_fields_NumberField(8,true);
mp4lib_Fields.FIELD_INT16 = new mp4lib_fields_NumberField(16,true);
mp4lib_Fields.FIELD_INT32 = new mp4lib_fields_NumberField(32,true);
mp4lib_Fields.FIELD_UINT8 = new mp4lib_fields_NumberField(8,false);
mp4lib_Fields.FIELD_UINT16 = new mp4lib_fields_NumberField(16,false);
mp4lib_Fields.FIELD_UINT32 = new mp4lib_fields_NumberField(32,false);
mp4lib_Fields.FIELD_BIT8 = new mp4lib_fields_NumberField(8,false);
mp4lib_Fields.FIELD_BIT16 = new mp4lib_fields_NumberField(16,false);
mp4lib_Fields.FIELD_BIT24 = new mp4lib_fields_NumberField(24,false);
mp4lib_Fields.FIELD_BIT32 = new mp4lib_fields_NumberField(32,false);
mp4lib_Fields.FIELD_INT64 = new mp4lib_fields_LongNumberField();
mp4lib_Fields.FIELD_UINT64 = new mp4lib_fields_LongNumberField();
mp4lib_Fields.FIELD_ID = new mp4lib_fields_BoxTypeField();
mp4lib_Fields.FIELD_STRING = new mp4lib_fields_StringField();
mp4lib_Fields.FIELD_STRING_UTF8 = new mp4lib_fields_StringField(true);
Mp4lib.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this);
